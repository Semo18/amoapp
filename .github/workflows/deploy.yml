name: Deploy amoapp

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment"
        type: choice
        required: true
        default: dev
        options: [dev, staging, prod]

permissions:
  contents: read

concurrency:
  group: deploy-amoapp-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}
    steps:
      - uses: actions/checkout@v4

      # ① Сразу нормализуем .sh (LF) и проверим shebang/+x — до любых деплоев
      - name: Normalize .sh line endings
        run: |
          find amoapp -name "*.sh" -exec sed -i 's/\r$//' {} \;

      - name: Verify run_worker.sh
        run: |
          set -euo pipefail
          head -n1 amoapp/run_worker.sh | grep -q '^#!' || \
            (echo "Missing shebang in run_worker.sh" && exit 1)
          # если хочешь не падать, а подправить — раскомментируй следующую строку:
          # chmod +x amoapp/run_worker.sh
          test -x amoapp/run_worker.sh || \
            (echo "run_worker.sh is not executable. Run: git update-index --chmod=+x amoapp/run_worker.sh" && exit 1)

      # ② Lint раньше деплоя — чтобы плохой код не уехал на сервер
      - name: Sort imports (isort)
        run: |
          python3 -m pip install isort
          isort --check-only amoapp

      - name: Lint (flake8)
        run: |
          python3 -m pip install flake8
          flake8 amoapp

      # ③ Дальше — проверка переменных, SSH, rsync и рестарт
      - name: Assert config
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${{ secrets.SSH_KEY }}" ] || { echo "secrets.SSH_KEY is empty"; exit 1; }
          [ -n "${{ vars.DEPLOY_HOST }}" ] || { echo "vars.DEPLOY_HOST is empty"; exit 1; }
          [ -n "${{ vars.DEPLOY_USER }}" ] || { echo "vars.DEPLOY_USER is empty"; exit 1; }
          [ -n "${{ vars.DEPLOY_DIR }}" ]  || { echo "vars.DEPLOY_DIR is empty";  exit 1; }

      - name: Setup SSH
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf '%s\n' "${{ secrets.SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

          if [ -n "${{ secrets.KNOWN_HOSTS }}" ]; then
            printf '%s\n' "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          else
            ssh-keyscan -p "${{ vars.SSH_PORT || '22' }}" -H "${{ vars.DEPLOY_HOST }}" > ~/.ssh/known_hosts 2>/dev/null
          fi
          chmod 644 ~/.ssh/known_hosts

          {
            echo "Host target"
            echo "  HostName ${{ vars.DEPLOY_HOST }}"
            echo "  User ${{ vars.DEPLOY_USER }}"
            echo "  Port ${{ vars.SSH_PORT || '22' }}"
            echo "  IdentityFile ~/.ssh/id_ed25519"
            echo "  IdentitiesOnly yes"
            echo "  StrictHostKeyChecking yes"
          } > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Show target
        run: |
          echo "Deploying to ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:${{ vars.DEPLOY_DIR }}"
          echo "Environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'dev' }}"

      - name: SSH ping
        run: ssh -o IdentitiesOnly=yes target "echo OK && whoami && hostname"

      - name: Rsync sources (exclude .venv)
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -ra EXS <<< "${{ vars.RSYNC_EXCLUDES || '.git,.github,.DS_Store,.venv,*.log,__pycache__/,*.pyc,README.for.Me.md,.gitignore,gh_actions_amoapp,gh_actions_amoapp.pub,CHECKS.md,.env.example' }}"
          EX_ARGS=()
          for e in "${EXS[@]}"; do [ -n "$e" ] && EX_ARGS+=(--exclude "$e"); done

          # если хочешь гарантировать +x на сервере — можно добавить --chmod=Du=rwx,Dgo=rx,Fu=rw,Fgo=r
          rsync -azvv --itemize-changes --human-readable --delete \
            --no-perms --no-owner --no-group --omit-dir-times \
            "${EX_ARGS[@]}" \
            -e "ssh -o IdentitiesOnly=yes" \
            ./  target:"${{ vars.DEPLOY_DIR }}/"

      - name: Post-deploy (venv + deps + restart)
        run: |
          ssh -o IdentitiesOnly=yes target "bash -lc '
            set -euo pipefail
            cd \"${{ vars.DEPLOY_DIR }}\"
            python3 -m venv .venv || true
            . .venv/bin/activate
            python -m ensurepip --upgrade
            python -m pip install --upgrade pip wheel || python -m pip install --upgrade pip wheel --break-system-packages
            if [ -f requirements.txt ]; then
              python -m pip install -r requirements.txt || python -m pip install -r requirements.txt --break-system-packages
            fi

            # страховка на сервере: LF и права у скрипта
            sed -i \"s/\r$//\" amoapp/run_worker.sh || true
            chmod 755 amoapp/run_worker.sh || true

            sudo -n systemctl daemon-reload
            sudo -n systemctl restart amoapp.service
            # перезапустим таймер, чтобы график обновился
            sudo -n systemctl restart amoapp-worker.timer
            sudo -n systemctl status amoapp.service --no-pager | head -n 20 || true
          '"

      - name: Health check
        run: |
          ssh -o IdentitiesOnly=yes target "bash -lc '
            set -e
            curl -fsS http://127.0.0.1:8000/health | sed -e \"s/.*/health OK: &/\"
          '"

      # Логи при фейле — и веб, и воркер
      - name: Fetch logs on failure
        if: failure()
        run: |
          ssh -o IdentitiesOnly=yes target "bash -lc '
            sudo -n journalctl -xeu amoapp.service --no-pager | tail -n 200 || true
            echo \"---\"
            sudo -n journalctl -xeu amoapp-worker.service --no-pager | tail -n 200 || true
          '"
