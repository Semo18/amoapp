# openai_client.py
import os, io, asyncio, time, traceback  # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏: —Ä–∞–±–æ—Ç–∞ —Å –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º/–ø–æ—Ç–æ–∫–∞–º–∏ –±–∞–π—Ç/–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é/–≤—Ä–µ–º–µ–Ω–µ–º/–ø—É—Ç—è–º–∏/—Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π –æ—à–∏–±–æ–∫
import re  # –¥–ª—è –æ—á–∏—Å—Ç–∫–∏/–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏
from pathlib import Path
from dotenv import load_dotenv
from typing import Optional, Tuple, List, Dict, Any  # –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–∏–ø–æ–≤ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∏ IDE
from aiogram.types import Message  # —Ç–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram
from aiogram import Bot  # –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞ (—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è/–¥–µ–π—Å—Ç–≤–∏—è)
from aiogram.enums import ChatAction  # –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
from openai import OpenAI  # –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç OpenAI API
from storage import get_thread_id, set_thread_id  # —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/—á—Ç–µ–Ω–∏—è ID —Ç—Ä–µ–¥–∞ (—Å–µ—Å—Å–∏–∏) –ø–æ chat_id
from pydub import AudioSegment  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –∑–≤—É–∫–æ–º (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ)
from repo import save_message  # —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
from texts import ACK_DELAYED  # üî¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–≤—Ä–∞—á (–∏–∑ texts.py)
from storage import should_ack
import logging  # üî¥ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤–µ—Ä—Ö—É, –µ—Å–ª–∏ –Ω–µ—Ç


# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ medbot (–≥–¥–µ –ª–µ–∂–∏—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª)
DOTENV_PATH = Path(__file__).resolve().parent / ".env"  # –ø—É—Ç—å –∫ .env —Ä—è–¥–æ–º —Å –∫–æ–¥–æ–º
load_dotenv(dotenv_path=DOTENV_PATH)  # –ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ .env

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º –∫–ª—é—á –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # —á–∏—Ç–∞–µ–º –∫–ª—é—á OpenAI
if not OPENAI_API_KEY:  # –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç ‚Äî –¥–∞—ë–º —è–≤–Ω—É—é –æ—à–∏–±–∫—É —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    raise RuntimeError(
        f"OPENAI_API_KEY is not set. Expected in {DOTENV_PATH}. "
        "Add line: OPENAI_API_KEY=sk-... to your medbot/.env"
    )

# –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å Redis –¥–ª—è –º–µ–∂–ø—Ä–æ—Ü–µ—Å—Å–Ω–æ–≥–æ –ª–æ–∫–∞; –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory –ª–æ–∫–∏
try:
    # redis-py 5.x
    import redis.asyncio as aioredis  # –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç
except Exception:
    try:
        # redis-py 4.x —Å—Ç–∏–ª—å
        from redis import asyncio as aioredis  # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∏–º–ø–æ—Ä—Ç—É
    except Exception:
        aioredis = None  # —Ñ–æ–ª–ª–±–µ–∫: –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∏ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞

# --- –∫–æ–Ω—Ñ–∏–≥ ---
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç OpenAI —Å –∫–ª—é—á–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ASSISTANT_ID = os.getenv("ASSISTANT_ID")  # ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ OpenAI (Assistant API)
DELAY_SEC = int(os.getenv("REPLY_DELAY_SEC", "0"))  # –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤
LOG_CHAT_ID = os.getenv("LOG_CHAT_ID", "") or os.getenv("ADMIN_CHAT_ID", "")  # —á–∞—Ç –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
LOG_BOT_TOKEN = os.getenv("LOG_BOT_TOKEN", "")  # –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º —Å–ª–∞—Ç—å –ª–æ–≥–∏ –Ω–µ –æ—Å–Ω–æ–≤–Ω—ã–º –±–æ—Ç–æ–º)
LOG_PREFIX = "[medbot]"  # –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–æ–≥-—á–∞—Ç

# –µ—Å–ª–∏ –∑–∞–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ª–æ–≥–æ–≤ ‚Äî –ø–æ–¥–Ω–∏–º–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑
_log_bot: Optional[Bot] = Bot(LOG_BOT_TOKEN) if LOG_BOT_TOKEN else None  # —Å–æ–∑–¥–∞—ë–º ¬´–±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤¬ª –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º None

# Redis-–∫–ª–∏–µ–Ω—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏ in-memory –ª–æ–∫–∏
REDIS_URL = os.getenv("REDIS_URL", "")  # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∞)
_redis = aioredis.from_url(REDIS_URL, decode_responses=True) if (aioredis and REDIS_URL) else None  # –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ None
_local_locks: Dict[str, asyncio.Lock] = {}  # –ª–æ–∫–∏ –≤ –ø–∞–º—è—Ç–∏ –ø–æ thread_id


# --- –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∏–ø–æ–≤ ---
IMAGE_EXTS = {".jpg", ".jpeg", ".png", ".webp", ".gif"}  # —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
RETRIEVAL_EXTS = {".pdf", ".txt", ".md", ".csv", ".docx", ".pptx", ".xlsx", ".json", ".rtf", ".html", ".htm"}  # –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º
AUDIO_EXTS = {".wav", ".mp3", ".m4a", ".ogg", ".opus"}  # —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–æ—Ä–º–∞—Ç—ã

# —Å—Ç–∞—Ç—É—Å—ã ¬´–∞–∫—Ç–∏–≤–Ω–æ–≥–æ¬ª run ‚Äî –ø—Ä–∏ –Ω–∏—Ö –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥
_ACTIVE_RUN_STATUSES = {"queued", "in_progress", "requires_action", "cancelling"}  # –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤


# üî¥ —Ö–µ–ª–ø–µ—Ä: –∫—Ä–∞—Å–∏–≤–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ Run
def _log_run_error(run) -> None:
    """–ï—Å–ª–∏ Run —É–ø–∞–ª, –ª–æ–≥–∏—Ä—É–µ–º last_error —Å —Ç–∏–ø–æ–º/—Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    try:
        err = getattr(run, "last_error", None)
        if err:
            tp = getattr(err, "type", "unknown")
            msg = getattr(err, "message", "")
            logging.error("OpenAI run error: type=%s msg=%s", tp, msg)
    except Exception:
        pass  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –≤–∞–ª–∏—Ç—å –ø–æ—Ç–æ–∫
# ---------- –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –¢–ê–ô–ü–ò–ù–ì–ê –ò –û–ß–ò–°–¢–ö–ò/–ù–ê–†–ï–ó–ö–ò –û–¢–í–ï–¢–û–í ----------


async def _typing_for(bot: Bot, chat_id: int, seconds: float) -> None:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..." –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ N —Å–µ–∫—É–Ω–¥
    """–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è ChatAction.TYPING —Ä–∞–∑ –≤ ~4 —Å–µ–∫."""
    end_at = time.time() + max(0.0, seconds)  # –∫–æ–≥–¥–∞ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å
    while time.time() < end_at:  # –ø–æ–∫–∞ –Ω–µ –≤—ã—à–ª–æ –≤—Ä–µ–º—è
        try:
            await bot.send_chat_action(chat_id, ChatAction.TYPING)  # –ø–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        except Exception:
            pass  # –Ω–µ —Ä–æ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö/—Ç—Ä–∞–Ω–∑–∏–µ–Ω—Ç–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
        await asyncio.sleep(4)  # Telegram –¥–µ—Ä–∂–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∫–æ–ª–æ 5 —Å–µ–∫; –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ ~4 —Å–µ–∫

_MD_STRIP_PATTERNS = [  # —à–∞–±–ª–æ–Ω—ã Markdown, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    (r"\*{2}(.+?)\*{2}", r"\1"),   # **–∂–∏—Ä–Ω—ã–π** ‚Üí –∂–∏—Ä–Ω—ã–π (–±–µ–∑ **)
    (r"#{1,6}\s*", ""),            # –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ ### Title ‚Üí Title
    (r"^-{3,}\s*$", ""),           # --- (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è) ‚Üí —É–¥–∞–ª–∏—Ç—å
    (r"`{3}.*?`{3}", ""),          # –∫–æ–¥-–±–ª–æ–∫ ```...``` ‚Üí —É–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø—Ä–æ—Å—Ç–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
    (r"`([^`]+)`", r"\1"),         # –∏–Ω–ª–∞–π–Ω-–∫–æ–¥ `x` ‚Üí x
]

def _sanitize_markdown(text: str) -> str:  # —É–¥–∞–ª—è–µ—Ç/–æ–±–ª–µ–≥—á–∞–µ—Ç Markdown-—Ä–∞–∑–º–µ—Ç–∫—É
    s = text or ""  # –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º —Å None
    for pat, repl in _MD_STRIP_PATTERNS:  # –ø—Ä–æ–≥–æ–Ω –ø–æ —à–∞–±–ª–æ–Ω–∞–º
        s = re.sub(pat, repl, s, flags=re.MULTILINE | re.DOTALL)  # –∑–∞–º–µ–Ω–∞ –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É
    return s.strip()  # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–æ–≤/–∫—Ä–∞—ë–≤

def _split_for_delivery(text: str) -> List[str]:
    """
    –†–µ–∂–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ: 1500 / 2500 / –æ—Å—Ç–∞—Ç–æ–∫.
    –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –¥–µ–ª–∏—Ç –ø–æ –ª–∏–º–∏—Ç—É.
    """
    t = text.strip() if text else ""
    if not t:
        return []

    def _safe_cut(segment: str, limit: int) -> str:
        """üî¥ –ò—â–µ—Ç –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ª–∏–º–∏—Ç–æ–º."""
        if len(segment) <= limit:
            return segment
        cut = segment[:limit]
        # –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é "–≥—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
        for p in [". ", "! ", "? ", "\n"]:
            pos = cut.rfind(p)
            if pos != -1 and pos > limit * 0.6:  # –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ
                return cut[: pos + len(p)].strip()
        return cut.strip()  # fallback ‚Äî –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º

    parts: List[str] = []
    remaining = t

    # üî¥ –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ~1500 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é)
    first = _safe_cut(remaining, 1500)
    parts.append(first)
    remaining = remaining[len(first):].strip()

    # üî¥ –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ~2500 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é)
    if remaining:
        second = _safe_cut(remaining, 2500)
        parts.append(second)
        remaining = remaining[len(second):].strip()

    # üî¥ –û—Å—Ç–∞—Ç–æ–∫ —Ä–∞–∑–±–∏–≤–∞–µ–º –∫—É—Å–∫–∞–º–∏ –ø–æ 4096 (Telegram limit)
    while remaining:
        chunk = _safe_cut(remaining, 4096)
        parts.append(chunk)
        remaining = remaining[len(chunk):].strip()

    return [p for p in parts if p]


# --- —Ç—Ä–µ–¥—ã ---
async def ensure_thread_choice(chat_id: int, choice: str) -> bool:  # –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´–Ω–æ–≤—ã–π¬ª/¬´–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–Ω–æ–≤—ã–π", —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π thread –≤ OpenAI
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ Redis. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥.
    """
    if choice == "–Ω–æ–≤—ã–π":  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        th = client.beta.threads.create()  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ (—Å–µ—Å—Å–∏—é) –≤ OpenAI
        set_thread_id(chat_id, th.id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–µ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        return True  # —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–¥ –±—ã–ª —Å–æ–∑–¥–∞–Ω
    return False  # –∏–Ω–∞—á–µ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏

def get_or_create_thread(chat_id: int) -> str:  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–¥ –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π thread_id –¥–ª—è —á–∞—Ç–∞,
    –ª–∏–±–æ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
    """
    th = get_thread_id(chat_id)  # –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π thread_id –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    if th:  # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
        return th  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    th_obj = client.beta.threads.create()  # –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –≤ OpenAI
    set_thread_id(chat_id, th_obj.id)  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID
    return th_obj.id  # –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ

def _ext(name: str) -> str:  # —É—Ç–∏–ª–∏—Ç–∞: –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    return pathlib.Path(name).suffix.lower()  # –±–µ—Ä—ë–º —Å—É—Ñ—Ñ–∏–∫—Å (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ) –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

def _is_image(name: str) -> bool:  # –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?
    return _ext(name) in IMAGE_EXTS  # –¥–∞, –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ IMAGE_EXTS

def _is_audio(name: str) -> bool:  # –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –∞—É–¥–∏–æ?
    return _ext(name) in AUDIO_EXTS  # –¥–∞, –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ AUDIO_EXTS

def _is_retrieval_doc(name: str) -> bool:  # –ø—Ä–æ–≤–µ—Ä–∫–∞: —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è ¬´–ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º¬ª?
    return _ext(name) in RETRIEVAL_EXTS  # –¥–∞, –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ RETRIEVAL_EXTS

# --- util: –ª–æ–≥ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π —á–∞—Ç ---
async def send_log(runtime_bot: Bot, text: str) -> None:  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π Telegram-—á–∞—Ç
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç.
    - –ï—Å–ª–∏ –µ—Å—Ç—å LOG_BOT_TOKEN ‚Äî —à–ª—ë–º —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ (_log_bot)
    - –ò–Ω–∞—á–µ ‚Äî —á–µ—Ä–µ–∑ runtime_bot (–æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç)
    - chat_id = LOG_CHAT_ID –∏–ª–∏ ADMIN_CHAT_ID
    """
    if not LOG_CHAT_ID:  # –µ—Å–ª–∏ –ª–æ–≥-—á–∞—Ç –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        return
    try:
        bot = _log_bot or runtime_bot  # –≤—ã–±–∏—Ä–∞–µ–º –±–æ—Ç–∞: –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –¥–ª—è –ª–æ–≥–æ–≤ –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ
        await bot.send_message(LOG_CHAT_ID, f"{LOG_PREFIX} {text}")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç
    except Exception:  # –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –ª–æ–º–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        # –Ω–µ –ø–∞–¥–∞–µ–º –Ω–∞ –ª–æ–≥–∞—Ö
        pass

def _upload_bytes(name: str, data: bytes) -> str:  # –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ OpenAI –∏ –≤–æ–∑–≤—Ä–∞—Ç –µ–≥–æ file_id
    return client.files.create(file=(name, io.BytesIO(data)), purpose="assistants").id  # —Å–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –≤ OpenAI –ø–æ–¥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤

async def _telegram_file_to_bytes(msg: Message) -> Tuple[str, bytes]:  # —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ Telegram –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏–º—è, –±–∞–π—Ç—ã)
    if getattr(msg, "voice", None):  # –µ—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        f = await msg.bot.get_file(msg.voice.file_id)  # –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        b = await msg.bot.download_file(f.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        raw = b.read()  # —á–∏—Ç–∞–µ–º –±–∞–π—Ç—ã
        wav = AudioSegment.from_file(io.BytesIO(raw))  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∞—É–¥–∏–æ —Å –∞–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
        buf = io.BytesIO()  # —Å–æ–∑–¥–∞—ë–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
        wav.export(buf, format="wav")  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV (—É–¥–æ–±–Ω–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
        return "voice.wav", buf.getvalue()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏ –±–∞–π—Ç—ã WAV
    if getattr(msg, "audio", None):  # –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª
        f = await msg.bot.get_file(msg.audio.file_id)  # –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        b = await msg.bot.download_file(f.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º
        return (msg.audio.file_name or "audio.mp3"), b.read()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç) –∏ –±–∞–π—Ç—ã
    if getattr(msg, "document", None):  # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç (PDF, DOCX –∏ —Ç.–¥.)
        f = await msg.bot.get_file(msg.document.file_id)  # –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        b = await msg.bot.download_file(f.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º
        return (msg.document.file_name or "document"), b.read()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –∏–ª–∏ "document" –∏ –±–∞–π—Ç—ã
    if getattr(msg, "photo", None):  # –µ—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ
        f = await msg.bot.get_file(msg.photo[-1].file_id)  # –±–µ—Ä—ë–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        b = await msg.bot.download_file(f.file_path)  # —Å–∫–∞—á–∏–≤–∞–µ–º
        return "photo.jpg", b.read()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –∏ –±–∞–π—Ç—ã
    return "message.txt", (msg.text or "").encode("utf-8")  # –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —É–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ txt

def _first_text(messages) -> Optional[str]:  # –¥–æ—Å—Ç–∞—ë—Ç –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    for m in messages.data:  # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
        if getattr(m, "role", None) == "assistant":  # –∏—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            for part in m.content:  # —É —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π (—Ç–µ–∫—Å—Ç/–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Ç.–ø.)
                if part.type == "text":  # –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å
                    return part.text.value  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç
    return None  # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –Ω–∞—à–ª–∏


# --- –ø–æ–º–æ—â—å: –ª–æ–∫–∏ –ø–æ thread_id ---

async def _acquire_thread_lock(thread_id: str):  # –ø—ã—Ç–∞–µ–º—Å—è –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ª–æ–∫ –ø–æ —Ç—Ä–µ–¥—É
    if _redis:
        key = f"medbot:lock:thread:{thread_id}"  # –∫–ª—é—á –ª–æ–∫–∞ –≤ Redis
        while True:
            ok = await _redis.set(key, "1", ex=120, nx=True)  # set NX + TTL
            if ok:
                return key  # –ø–æ–ª—É—á–∏–ª–∏ –ª–æ–∫
            await asyncio.sleep(0.2)  # –∂–¥—ë–º –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è
    else:
        lock = _local_locks.setdefault(thread_id, asyncio.Lock())  # –ø–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –ª–æ–∫ –≤ –ø–∞–º—è—Ç–∏
        await lock.acquire()
        return lock  # –≤–µ—Ä–Ω—ë–º —Å–∞–º –ª–æ–∫-–æ–±—ä–µ–∫—Ç

async def _release_thread_lock(lock_token):  # –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ª–æ–∫–∞
    if _redis and isinstance(lock_token, str):
        try:
            await _redis.delete(lock_token)  # —Å–Ω–∏–º–∞–µ–º –∫–ª—é—á –ª–æ–∫–∞ –≤ Redis
        except Exception:
            pass
    elif isinstance(lock_token, asyncio.Lock):
        try:
            lock_token.release()  # –æ—Ç–ø—É—Å–∫–∞–µ–º –ª–æ–∫ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        except Exception:
            pass


# --- –ø–æ–º–æ—â—å: –æ–∂–∏–¥–∞–Ω–∏–µ idle –∏ —Ä–µ—Ç—Ä–∞–∏ messages.create ---

def _has_active_runs(runs_list) -> bool:  # –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ run‚Äô—ã –≤ —Ç—Ä–µ–¥–µ
    return any(getattr(r, "status", None) in _ACTIVE_RUN_STATUSES for r in runs_list.data)  # true, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ

def _find_oldest_active(runs_list):  # –Ω–∞–π—Ç–∏ ¬´—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π¬ª –∞–∫—Ç–∏–≤–Ω—ã–π run (–Ω–∞ –≤—Å—è–∫–∏–π)
    actives = [r for r in runs_list.data if getattr(r, "status", None) in _ACTIVE_RUN_STATUSES]
    return actives[-1] if actives else None  # —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ –¥–∞—Ç–µ —É OpenAI SDK (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)

async def _wait_thread_idle(thread_id: str, timeout_s: int = 60, poll_s: float = 0.4):  # –¥–æ–∂–∏–¥–∞–µ–º—Å—è, –ø–æ–∫–∞ —Ç—Ä–µ–¥ –±—É–¥–µ—Ç ¬´—Å–≤–æ–±–æ–¥–µ–Ω¬ª
    start = time.time()  # –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    while True:
        runs = client.beta.threads.runs.list(thread_id=thread_id, limit=10)  # —Å–º–æ—Ç—Ä–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ run‚Äô—ã
        if not _has_active_runs(runs):  # –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º
            return
        if time.time() - start > timeout_s:  # —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
            oldest = _find_oldest_active(runs)  # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–º–µ–Ω–∏—Ç—å ¬´—Å—Ç–∞—Ä—ã–π¬ª run
            if oldest:
                try:
                    client.beta.threads.runs.cancel(thread_id=thread_id, run_id=oldest.id)  # –º—è–≥–∫–∞—è –æ—Ç–º–µ–Ω–∞
                except Exception:
                    pass
            await asyncio.sleep(2)  # –∫–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ cancel
            return  # –≤—ã—Ö–æ–¥–∏–º ‚Äî –ø—É—Å—Ç—å –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–µ—à–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
        await asyncio.sleep(poll_s)  # –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—É—Ç—å –ø–æ–∑–∂–µ

async def _messages_create_with_retry(thread_id: str, content, attachments=None, max_attempts: int = 3):  # –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ—Ç—Ä–∞—è–º–∏
    for attempt in range(max_attempts):
        try:
            client.beta.threads.messages.create(  # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç—Ä–µ–¥ OpenAI
                thread_id=thread_id,
                role="user",
                content=content,
                attachments=attachments,
            )
            return  # —É—Å–ø–µ—Ö
        except Exception as e:
            msg = str(getattr(e, "message", "")) or str(e)  # —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            if "while a run" in msg and attempt < max_attempts - 1:  # –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è 400 ¬´run is active¬ª
                await asyncio.sleep(0.4 * (attempt + 1))  # –±—ç–∫–æ—Ñ—Ñ
                await _wait_thread_idle(thread_id, timeout_s=20)  # –µ—â—ë —Ä–∞–∑ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç—Ä–µ–¥ idle
                continue
            raise  # –µ—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º


# –ü—Ä–æ–≤–µ—Ä–∏–º, –∫–∞–∫–æ–π –º–µ—Ö–∞–Ω–∏–∑–º –ª–æ–∫–∞ –∞–∫—Ç–∏–≤–µ–Ω (–¥–ª—è –ª–æ–≥–æ–≤ / —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
try:
    bot_for_log = _log_bot or (Bot(LOG_BOT_TOKEN) if LOG_BOT_TOKEN else None)
    if bot_for_log and LOG_CHAT_ID:
        msg = "Redis lock backend: ENABLED" if _redis else "Redis lock backend: DISABLED (using in-memory)"
        asyncio.create_task(send_log(bot_for_log, msg))  # –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
except Exception:
    pass  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ª–æ–≥-–±–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ


# --- –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ ---
async def schedule_processing(msg: Message, delay_sec: Optional[int] = None) -> None:  # –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–¥–∞—á—É –æ—Ç–≤–µ—Ç–∞
    try:  # –∑–∞—â–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ—Ç –ø–∞–¥–µ–Ω–∏–π
        delay = int(delay_sec if delay_sec is not None else DELAY_SEC)  # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
        if delay > 0:  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
            await asyncio.sleep(delay)  # –∂–¥—ë–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥

        chat_id = msg.chat.id
        thread_id = get_or_create_thread(chat_id)
        await send_log(msg.bot, f"DEBUG ACK check={should_ack(chat_id, 3600)} chat_id={chat_id}")

        # üî¥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ACK (–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞)
        if should_ack(chat_id, cooldown_sec=60):  # —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É
            # –ü–æ–∫–∞–∑–∞—Ç—å "–ø–µ—á–∞—Ç–∞–µ—Ç..." 20 —Å–µ–∫—É–Ω–¥
            await _typing_for(msg.bot, chat_id, 20)

            # –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω–æ –∂–¥—ë–º 20 —Å–µ–∫—É–Ω–¥ (–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∏–∑—É–∞–ª—å–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å)
            await asyncio.sleep(20)

            # üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ texts.py
            ack_msg = await msg.answer(ACK_DELAYED)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∏—Å—Ö–æ–¥—è—â–µ–µ
            save_message(
                chat_id=chat_id,
                direction=1,
                text=ACK_DELAYED,
                content_type="system",
                message_id=getattr(ack_msg, "message_id", None),
            )

        base_text = msg.text or "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–ª–æ–∂–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å –∫–∞–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç."  # —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        content: List[Dict[str, Any]] = [{"type": "text", "text": base_text}]  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥
        attachments = None  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–ª–æ–∂–µ–Ω–∏–π (–¥–ª—è file_search) –Ω–µ—Ç

        if any([getattr(msg, "voice", None),
                getattr(msg, "audio", None),
                getattr(msg, "document", None),
                getattr(msg, "photo", None)]):  # –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ñ–∞–π–ª –≤–æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

            name, data = await _telegram_file_to_bytes(msg)  # —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram ‚Üí (–∏–º—è, –±–∞–π—Ç—ã)
            fid = _upload_bytes(name, data)  # –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ OpenAI –∏ –ø–æ–ª—É—á–∞–µ–º file_id

            if _is_image(name):  # –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                content.append({"type": "image_file", "image_file": {"file_id": fid}})  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∫–æ–Ω—Ç–µ–Ω—Ç

            elif _is_audio(name):  # –µ—Å–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ
                # —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ Whisper
                try:
                    tr = client.audio.transcriptions.create(  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
                        model="whisper-1",  # –º–æ–¥–µ–ª—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        file=(name, io.BytesIO(data)),  # –∏–º—è –∏ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞
                    )
                    text = tr.text.strip() if getattr(tr, "text", None) else ""  # –±–µ—Ä—ë–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
                except Exception:
                    text = ""  # –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                if not text:  # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
                    text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."  # –ø–∏—à–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                content = [{"type": "text",
                            "text": f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ ({name}):\n{text}\n\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç."}]  # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π

            elif _is_retrieval_doc(name):  # –µ—Å–ª–∏ —ç—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (Retrieval)
                attachments = [{"file_id": fid, "tools": [{"type": "file_search"}]}]  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç file_search –∫ —Ñ–∞–π–ª—É
                content[0]["text"] = f"{base_text}\n\n–£—á—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç: {name}"  # –ø—Ä–æ—Å–∏–º —É—á–µ—Å—Ç—å —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ –æ—Ç–≤–µ—Ç–µ

            else:  # –ø—Ä–æ—á–∏–µ —Ñ–∞–π–ª—ã (–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ç–∏–ø)
                content[0]["text"] = f"{base_text}\n\n(–§–∞–π–ª {name} –∑–∞–≥—Ä—É–∂–µ–Ω; –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: PDF/JPG –∏ —Ç.–ø.)"  # –º—è–≥–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        # ‚Äî‚Äî –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û THREAD_ID: –æ–¥–∏–Ω –ø–∏—Å–∞—Ç–µ–ª—å –∑–∞ —Ä–∞–∑ ‚Äî –∑–∞—â–∏—â–∞–µ–º messages.create/run.create
        lock_token = await _acquire_thread_lock(thread_id)  # –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫ (Redis –∏–ª–∏ in-memory)
        try:
            # –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤ —Ç—Ä–µ–¥–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö run‚Äô–æ–≤
            await _wait_thread_idle(thread_id, timeout_s=60)  # –¥–æ–∂–¥–∞—Ç—å—Å—è idle –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –º—è–≥–∫—É—é –æ—Ç–º–µ–Ω—É ¬´—Å—Ç–∞—Ä–æ–≥–æ¬ª run

            # 2) —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ (–±–µ–∑–æ–ø–∞—Å–Ω–æ, —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –Ω–∞ 400 ‚Äúrun is active‚Äù)
            await _messages_create_with_retry(  # –æ–±—ë—Ä—Ç–∫–∞ —Å –±—ç–∫–æ—Ñ—Ñ–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–æ–º –Ω–∞ –∫–æ–ª–ª–∏–∑–∏—é
                thread_id=thread_id,
                content=content,
                attachments=attachments,
                max_attempts=3,
            )

            # 3) –∑–∞–ø—É—Å–∫ run
            run = client.beta.threads.runs.create(  # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç—Ä–µ–¥—É
                thread_id=thread_id,  # —Ç—Ä–µ–¥, –≥–¥–µ –ª–µ–∂–∏—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                assistant_id=ASSISTANT_ID,  # –∫–∞–∫–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å
                tool_choice="auto",  # –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            )

            # üî¥ –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç —Å—Ç–∞—Ä—Ç–∞ Run
            await send_log(
                msg.bot,
                f"üöÄ Run {run.id} started for chat_id={chat_id}, thread={thread_id}"
            )

        finally:
            await _release_thread_lock(lock_token)  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ª–æ–∫

        # 4) –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ (–ª–æ–≥–∏—Ä—É–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞ –≤ –ª–æ–≥-—á–∞—Ç)
        started = time.time()  # –æ—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞
        last_status = None  # –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        while True:  # –æ–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)  # —É–∑–Ω–∞—ë–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            if run.status != last_status:  # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
                await send_log(msg.bot, f"run {run.id} status={run.status} chat_id={chat_id}")  # —à–ª—ë–º –ª–æ–≥ –æ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
                last_status = run.status  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            if run.status in {"completed", "failed", "requires_action", "cancelled", "expired"}:  # –µ—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å
                if run.status != "completed":
                    _log_run_error(run)  # üî¥ –ª–æ–≥–∏—Ä—É–µ–º last_error, –µ—Å–ª–∏ –Ω–µ—É—Å–ø–µ—Ö
                break  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
            await asyncio.sleep(2)  # –∂–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if time.time() - started > 600:  # –µ—Å–ª–∏ –∂–¥—ë–º —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (—Ç–∞–π–º–∞—É—Ç 10 –º–∏–Ω—É—Ç)
                await send_log(msg.bot, f"run {run.id} timeout chat_id={chat_id}")  # –ª–æ–≥–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç
                try:
                    client.beta.threads.runs.cancel(thread_id=thread_id, run_id=run.id)  # –º—è–≥–∫–æ –æ—Ç–º–µ–Ω—è–µ–º ¬´–¥–æ–ª–≥–∏–π¬ª run
                except Exception:
                    pass
                break  # –≤—ã—Ö–æ–¥–∏–º

        # 5) –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if run.status == "completed":  # –µ—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ—Ç–≤–µ—Ç
            msgs = client.beta.threads.messages.list(thread_id=thread_id, order="desc", limit=2)  # –±–µ—Ä—ë–º —Å–≤–µ–∂–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç—Ä–µ–¥–∞
            raw_txt = _first_text(msgs)  # –¥–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            if raw_txt:  # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å
                clean = _sanitize_markdown(raw_txt)  # —É–±–∏—Ä–∞–µ–º ###, **, --- –∏ –ø—Ä. –∏–∑ –æ—Ç–≤–µ—Ç–∞
                chunks = _split_for_delivery(clean)  # —Ä–µ–∂–µ–º: 1500 / 2500 / –æ—Å—Ç–∞–ª—å–Ω–æ–µ (—Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞ 4096)
                if not chunks:
                    chunks = [clean]  # –∑–∞—â–∏—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞

                # –ü–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ‚Äî 60 —Å–µ–∫ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
                await _typing_for(msg.bot, chat_id, 240) # 4 –º–∏–Ω (240 —Å–µ–∫)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
                resp = await msg.answer(chunks[0])
                save_message(  # –ª–æ–≥–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥—è—â–µ–µ
                    chat_id=msg.chat.id,
                    direction=1,
                    text=chunks[0],
                    content_type="text",
                    message_id=getattr(resp, "message_id", None),
                )

                # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ‚Äî "–ø–µ—á–∞—Ç–∞–µ—Ç..." 1.5 –º–∏–Ω—É—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
                if len(chunks) >= 2:
                    await _typing_for(msg.bot, chat_id, 300)  # 5 –º–∏–Ω (300 —Å–µ–∫)
                    resp2 = await msg.answer(chunks[1])
                    save_message(
                        chat_id=msg.chat.id,
                        direction=1,
                        text=chunks[1],
                        content_type="text",
                        message_id=getattr(resp2, "message_id", None),
                    )

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–µ—Ç—å—è (–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ ‚Äî –≤–¥—Ä—É–≥ ¬´—Ö–≤–æ—Å—Ç¬ª > 4096), —Ç–æ:
                if len(chunks) >= 3:
                    await _typing_for(msg.bot, chat_id, 180)  # 3 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç—å—é
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫—É—Å–∫–∏ (—Ç—Ä–µ—Ç—å—é –∏ –¥–∞–ª–µ–µ)
                    for i, tail_part in enumerate(chunks[2:], start=3):
                        respN = await msg.answer(tail_part)
                        save_message(
                            chat_id=msg.chat.id,
                            direction=1,
                            text=tail_part,
                            content_type="text",
                            message_id=getattr(respN, "message_id", None),
                        )

                return  # –∑–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π

        await msg.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")  # –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
        await send_log(msg.bot, f"run {run.id} finished with status={run.status} (no text) chat_id={chat_id}")  # –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
        _log_run_error(run)  # üî¥ –ª–æ–≥–∏—Ä—É–µ–º last_error –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        save_message(  # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            chat_id=msg.chat.id,
            direction=1,
            text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
            content_type="system",
        )

    except Exception as e:  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ —É–ø–∞–ª–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await msg.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")  # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
        await send_log(msg.bot, f"exception: {e}\n{traceback.format_exc()}")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –ª–æ–≥-—á–∞—Ç
        save_message(  # –ª–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            chat_id=msg.chat.id,
            direction=1,
            text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.",
            content_type="system",
        )
# test