#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os  # —Ä–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
import hmac  # HMAC –ø–æ–¥–ø–∏—Å—å
import hashlib  # md5 –∏ sha1
import datetime  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ Date –≤ GMT
import json  # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
import sys  # –≤—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
import requests  # HTTP-–∫–ª–∏–µ–Ω—Ç (pip install requests)


def _must_env(name: str) -> str:
    """–î–æ—Å—Ç–∞—ë–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –ø–∞–¥–∞–µ–º —Å –ø–æ–Ω—è—Ç–Ω–æ–π –æ—à–∏–±–∫–æ–π."""
    val = os.getenv(name)  # —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    if not val:  # –µ—Å–ª–∏ –ø—É—Å—Ç–æ
        print(f"‚ùå env {name} is not set", file=sys.stderr)  # –ª–æ–≥ –æ—à–∏–±–∫–∏
        sys.exit(1)  # –≤—ã—Ö–æ–¥–∏–º —Å –∫–æ–¥–æ–º 1
    return val  # –æ—Ç–¥–∞—ë–º –∑–Ω–∞—á–µ–Ω–∏–µ


def get_amojo_id(amo_domain: str, token: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º amojo_id –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ /api/v4/account?with=amojo_id."""
    url = f"https://{amo_domain}/api/v4/account"  # –±–∞–∑–æ–≤—ã–π URL
    params = {"with": "amojo_id"}  # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø. –ø–æ–ª–µ
    headers = {"Authorization": f"Bearer {token}"}  # –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è OAuth
    resp = requests.get(url, params=params, headers=headers, timeout=15)  # GET
    if resp.status_code // 100 != 2:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º 2xx
        print(f"‚ùå account GET [{resp.status_code}]: {resp.text}", file=sys.stderr)
        sys.exit(1)  # –≤—ã—Ö–æ–¥–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
    data = resp.json()  # –ø–∞—Ä—Å–∏–º JSON
    amojo_id = data.get("amojo_id")  # –±–µ—Ä—ë–º amojo_id
    if not amojo_id:  # –µ—Å–ª–∏ –Ω–µ—Ç
        print("‚ùå amojo_id not found in response", file=sys.stderr)  # –ª–æ–≥
        sys.exit(1)  # –≤—ã—Ö–æ–¥–∏–º
    return amojo_id  # –æ—Ç–¥–∞—ë–º amojo_id


def build_signature(method: str, path: str, body: str, secret: str) -> tuple[str, str, str, str]:
    """
    –ì–æ—Ç–æ–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ Date, Content-Type, Content-MD5, X-Signature –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º Chat API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (date_gmt, content_type, md5_hex, signature_hex).
    """
    method_up = method.upper()  # –º–µ—Ç–æ–¥ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏
    content_type = "application/json"  # —Ç–∏–ø —Ç–µ–ª–∞
    date_gmt = datetime.datetime.utcnow().strftime("%a, %d %b %Y %H:%M:%S GMT")  # RFC 1123
    md5_hex = hashlib.md5(body.encode("utf-8")).hexdigest()  # md5 –æ—Ç —Ç–µ–ª–∞
    sign_str = "\n".join([method_up, md5_hex, content_type, date_gmt, path])  # —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    signature_hex = hmac.new(  # —Å—á–∏—Ç–∞–µ–º HMAC-SHA1
        secret.encode("utf-8"), sign_str.encode("utf-8"), hashlib.sha1
    ).hexdigest()
    return date_gmt, content_type, md5_hex, signature_hex  # –æ—Ç–¥–∞—ë–º –∑–∞–≥–æ–ª–æ–≤–∫–∏


def connect_channel(chat_channel_id: str, secret: str, amojo_id: str) -> str:
    """
    –î–µ–ª–∞–µ–º POST /v2/origin/custom/{channel_id}/connect –∫ amojo.amocrm.ru.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º scope_id –ø—Ä–∏ —É—Å–ø–µ—Ö–µ.
    """
    path = f"/v2/origin/custom/{chat_channel_id}/connect"  # –ø—É—Ç—å –±–µ–∑ –¥–æ–º–µ–Ω–∞/–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    url = f"https://amojo.amocrm.ru{path}"  # –ø–æ–ª–Ω—ã–π URL Chat API
    body_obj = {  # —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        "account_id": amojo_id,  # amojo_id –∞–∫–∫–∞—É–Ω—Ç–∞
        "title": "MedBot Bridge",  # –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –∫–∞–Ω–∞–ª–∞
        "hook_api_version": "v2",  # –≤–µ—Ä—Å–∏—è —Ö—É–∫-–ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    }
    body = json.dumps(body_obj, separators=(",", ":"))  # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON
    date_gmt, content_type, md5_hex, signature_hex = build_signature(  # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å
        "POST", path, body, secret
    )
    headers = {  # –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º Chat API
        "Date": date_gmt,  # –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        "Content-Type": content_type,  # —Ç–∏–ø —Ç–µ–ª–∞
        "Content-MD5": md5_hex,  # md5 –æ—Ç —Ç–µ–ª–∞
        "X-Signature": signature_hex,  # HMAC-SHA1 –ø–æ–¥–ø–∏—Å—å
    }
    resp = requests.post(url, data=body, headers=headers, timeout=15)  # –≤—ã–ø–æ–ª–Ω—è–µ–º POST
    if resp.status_code // 100 != 2:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º 2xx
        print(f"‚ùå connect [{resp.status_code}]: {resp.text}", file=sys.stderr)  # –ª–æ–≥ –æ—à–∏–±–∫–∏
        sys.exit(1)  # –≤—ã—Ö–æ–¥–∏–º
    data = resp.json()  # –ø–∞—Ä—Å–∏–º JSON
    scope_id = data.get("scope_id") or data.get("scope")  # —á–∏—Ç–∞–µ–º scope_id
    if not scope_id:  # –µ—Å–ª–∏ –Ω–µ—Ç
        print(f"‚ùå scope_id not found in response: {data}", file=sys.stderr)  # –ª–æ–≥
        sys.exit(1)  # –≤—ã—Ö–æ–¥–∏–º
    return scope_id  # –æ—Ç–¥–∞—ë–º scope_id


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—É—á–∞–µ–º amojo_id ‚Üí –¥–µ–ª–∞–µ–º connect ‚Üí –ø–µ—á–∞—Ç–∞–µ–º scope_id."""
    amo_domain = _must_env("AMO_DOMAIN")  # –¥–æ–º–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞
    access_token = _must_env("AMO_ACCESS_TOKEN")  # OAuth —Ç–æ–∫–µ–Ω
    chat_channel_id = _must_env("CHAT_CHANNEL_ID")  # ID –∫–∞–Ω–∞–ª–∞ (id –∏–∑ –ø–∏—Å—å–º–∞)
    chat_secret = _must_env("CHAT_SECRET")  # —Å–µ–∫—Ä–µ—Ç –∫–∞–Ω–∞–ª–∞ (secret_key –∏–∑ –ø–∏—Å—å–º–∞)

    print("üîé Getting amojo_id ...")  # –ª–æ–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
    amojo_id = get_amojo_id(amo_domain, access_token)  # –ø–æ–ª—É—á–∞–µ–º amojo_id
    print(f"‚úÖ amojo_id: {amojo_id}")  # –≤—ã–≤–æ–¥–∏–º amojo_id

    print("üîó Connecting account to chat channel ...")  # –ª–æ–≥
    scope_id = connect_channel(chat_channel_id, chat_secret, amojo_id)  # connect ‚Üí scope_id
    print(f"‚úÖ scope_id: {scope_id}")  # –ø–µ—á–∞—Ç–∞–µ–º scope_id
    print("\n‚û°Ô∏è  –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≤–∞—à webhook:")  # –ø–æ–¥—Å–∫–∞–∑–∫–∞
    print(f"    https://amo.ap-development.com/medbot/amo-webhook/{scope_id}")  # –ø—Ä–∏–º–µ—Ä URL


if __name__ == "__main__":  # —Ç–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞
    main()  # –≤—ã–∑—ã–≤–∞–µ–º main
