"""
amo_client.py ‚Äî –†–∞–±–æ—Ç–∞ —Å amoCRM API
-----------------------------------
–¢–µ–ø–µ—Ä—å —Å:
  ‚Ä¢ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º access/refresh —Ç–æ–∫–µ–Ω–æ–≤.
  ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å—å—é –≤ .env –∏ JSON-–∫—ç—à.
  ‚Ä¢ Redis-lock –ø—Ä–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö.
  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º retry –ø—Ä–∏ 401 Unauthorized.
"""

import os
import json
import time
import aiohttp
import asyncio
import hashlib
import hmac
import binascii
import logging
from typing import Optional
from storage import redis  # üî¥ –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Redis-–∫–ª–∏–µ–Ω—Ç

# ---------------------------------------------------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø—É—Ç–∏
# ---------------------------------------------------------------------

AMO_RUNTIME_DIR = "/var/www/medbot/runtime"
AMO_TOKEN_CACHE = os.path.join(AMO_RUNTIME_DIR, "amo_tokens.json")
AMO_REQUEST_TIMEOUT_SEC = 15

# ---------------------------------------------------------------------
# –£—Ç–∏–ª–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∏ (–¥–ª—è Chat API)
# ---------------------------------------------------------------------


def _md5_hex_lower(data: bytes) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MD5-—Ö–µ—à –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (hex)."""
    return hashlib.md5(data).hexdigest().lower()


def _rfc1123_now_gmt() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC1123 (GMT)."""
    return time.strftime("%a, %d %b %Y %H:%M:%S GMT", time.gmtime())


def _hmac_sha1_hex(src: str, secret: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HMAC-SHA1(src, key) –≤ hex lower.
    –ï—Å–ª–∏ secret –ø–æ—Ö–æ–∂ –Ω–∞ hex, —Ç—Ä–∞–∫—Ç—É–µ—Ç—Å—è –∫–∞–∫ –±–∞–π—Ç—ã.
    """
    is_hex = len(secret) in (40, 64) and all(
        c in "0123456789abcdef" for c in secret.lower()
    )
    key = binascii.unhexlify(secret) if is_hex else secret.encode()
    return hmac.new(key, src.encode(), hashlib.sha1).hexdigest().lower()


# ---------------------------------------------------------------------
# AmoTokenManager ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤
# ---------------------------------------------------------------------


class AmoTokenManager:
    """–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ amoCRM —Ç–æ–∫–µ–Ω–æ–≤."""

    def __init__(self) -> None:
        self.domain = os.getenv("AMO_API_URL", "").replace("https://", "")
        self.client_id = os.getenv("AMO_CLIENT_ID")
        self.client_secret = os.getenv("AMO_CLIENT_SECRET")
        self.redirect_uri = os.getenv("AMO_REDIRECT_URI")
        self._env_path = "/var/www/medbot/.env"
        self._lock_key = "amo:token:lock"
        self._access_token = os.getenv("AMO_ACCESS_TOKEN")
        self._refresh_token = os.getenv("AMO_REFRESH_TOKEN")

    # --------------------------
    # üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # --------------------------

    async def get_access_token(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏–π access_token.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç Redis-–∫—ç—à ‚Üí JSON ‚Üí env, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        """
        cached = await redis.get("amo:access_token")
        if cached:
            return cached.decode()

        if not self._access_token or not await self._validate_token():
            await self.refresh_tokens()

        await redis.setex("amo:access_token", 3600, self._access_token)
        return self._access_token

    async def refresh_tokens(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç access/refresh —Ç–æ–∫–µ–Ω—ã —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π Redis."""
        async with redis.lock(self._lock_key, timeout=30):
            logging.info("‚ôªÔ∏è Refreshing amoCRM tokens...")
            url = f"https://{self.domain}/oauth2/access_token"
            payload = {
                "client_id": self.client_id,
                "client_secret": self.client_secret,
                "grant_type": "refresh_token",
                "refresh_token": self._refresh_token,
                "redirect_uri": self.redirect_uri,
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url, json=payload, timeout=AMO_REQUEST_TIMEOUT_SEC
                ) as resp:
                    data = await resp.json()
                    if resp.status != 200:
                        raise RuntimeError(
                            f"Token refresh failed [{resp.status}]: {data}"
                        )

            self._access_token = data["access_token"]
            self._refresh_token = data["refresh_token"]
            await self._persist_tokens(data)
            logging.info("‚úÖ amoCRM tokens updated successfully")

    async def _persist_tokens(self, data: dict) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã –≤ JSON –∏ .env."""
        os.makedirs(AMO_RUNTIME_DIR, exist_ok=True)
        json.dump(data, open(AMO_TOKEN_CACHE, "w"), indent=2)

        # –æ–±–Ω–æ–≤–ª—è–µ–º .env –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        lines = []
        with open(self._env_path, "r") as f:
            for line in f:
                if line.startswith("AMO_ACCESS_TOKEN="):
                    line = f"AMO_ACCESS_TOKEN={data['access_token']}\n"
                elif line.startswith("AMO_REFRESH_TOKEN="):
                    line = f"AMO_REFRESH_TOKEN={data['refresh_token']}\n"
                lines.append(line)
        with open(self._env_path, "w") as f:
            f.writelines(lines)

    async def _validate_token(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∂–∏–≤ –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (GET /account)."""
        try:
            url = f"https://{self.domain}/api/v4/account"
            headers = {"Authorization": f"Bearer {self._access_token}"}
            async with aiohttp.ClientSession() as s:
                async with s.get(url, headers=headers) as r:
                    return r.status == 200
        except Exception:
            return False


# ---------------------------------------------------------------------
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π amo_request ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å auto-refresh
# ---------------------------------------------------------------------


async def amo_request(
    method: str,
    path: str,
    json_data: Optional[dict] = None,
    retries: int = 2,
) -> Optional[dict]:
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ amoCRM —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞."""
    manager = AmoTokenManager()
    token = await manager.get_access_token()
    domain = manager.domain
    url = f"https://{domain}{path}"

    for attempt in range(retries):
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
        }
        async with aiohttp.ClientSession() as session:
            async with session.request(
                method, url, json=json_data, timeout=AMO_REQUEST_TIMEOUT_SEC
            ) as resp:
                text = await resp.text()
                if resp.status == 401 and attempt == 0:
                    logging.warning("‚ö†Ô∏è Token expired, refreshing...")
                    await manager.refresh_tokens()
                    token = await manager.get_access_token()
                    continue
                if 200 <= resp.status < 300:
                    return await resp.json()
                logging.error(f"‚ùå amo_request [{resp.status}]: {text}")
                return None
    return None


# ---------------------------------------------------------------------
# ChatAPI v2 ‚Äî –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ amoCRM
# ---------------------------------------------------------------------


async def send_chat_message_v2(
    scope_id: str,
    chat_id: int,
    text: str,
    username: Optional[str] = None,
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ new_message –≤ Chat API (amojo)."""
    secret = os.getenv("AMO_CHAT_SECRET", "")
    if not secret or not scope_id:
        logging.warning("‚ö†Ô∏è Chat v2 missing credentials")
        return False

    payload = {
        "event_type": "new_message",
        "payload": {
            "conversation_id": f"tg_{chat_id}",
            "message": {"type": "text", "text": text[:4000]},
            "user": {"id": str(chat_id), "name": username or f"User {chat_id}"},
        },
    }
    body = json.dumps(payload, ensure_ascii=False).encode()
    content_type = "application/json"
    content_md5 = _md5_hex_lower(body)
    date_gmt = _rfc1123_now_gmt()
    path = f"/v2/origin/custom/{scope_id}/chats"
    sign_str = "\n".join(["POST", content_md5, content_type, date_gmt, path])
    signature = _hmac_sha1_hex(sign_str, secret)
    url = f"https://amojo.amocrm.ru{path}"

    async with aiohttp.ClientSession() as s:
        async with s.post(
            url,
            data=body,
            headers={
                "Content-Type": content_type,
                "Content-MD5": content_md5,
                "Date": date_gmt,
                "X-Signature": signature,
            },
            timeout=AMO_REQUEST_TIMEOUT_SEC,
        ) as r:
            txt = await r.text()
            logging.info(f"üí¨ ChatAPI v2 send [{r.status}]: {txt}")
            return 200 <= r.status < 300


# ---------------------------------------------------------------------
# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ---------------------------------------------------------------------


async def _startup() -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    try:
        manager = AmoTokenManager()
        ok = await manager._validate_token()
        if not ok:
            logging.info("üîÑ Refreshing amoCRM tokens on startup...")
            await manager.refresh_tokens()
        else:
            logging.info("‚úÖ amoCRM token is valid on startup")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è amoCRM startup check failed: {e}")

# ---------------------------------------------------------------------
# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º (app.py –æ–∂–∏–¥–∞–µ—Ç refresh_access_token)
# ---------------------------------------------------------------------


async def refresh_access_token() -> str:
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    –í—ã–∑—ã–≤–∞–µ—Ç AmoTokenManager.refresh_tokens() –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π access_token.
    """
    from amo_client import AmoTokenManager  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–∏
    manager = AmoTokenManager()
    await manager.refresh_tokens()
    return manager._access_token
