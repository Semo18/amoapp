# amo_client.py
# üî¥ –ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM:
# - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ refresh_token
# - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
# - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–¥–µ–ª–∫–∞–º
# - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∫–∏ chat_id ‚Üí lead_id –≤ Redis

import os, aiohttp, asyncio, logging
from dotenv import load_dotenv
from pathlib import Path
from storage import set_lead_id, get_lead_id  # üî¥ —Å–≤—è–∑—å chat_id ‚Üí lead_id
from typing import Optional
from constants import AMO_REQUEST_TIMEOUT_SEC  # üî¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è amoCRM API
import hashlib  # –¥–ª—è Content-MD5  # noqa: E402
import hmac     # –¥–ª—è HMAC-SHA1 –ø–æ–¥–ø–∏—Å–∏  # noqa: E402
import base64   # –∏–Ω–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ, –Ω–æ —Ç—É—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º  # noqa: E402
import datetime # –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Date  # noqa: E402
import json     # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞  # noqa: E402

# =============================
#        –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø
# =============================

ENV_PATH = "/var/www/medbot/.env"  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH)

AMO_API_URL = os.getenv("AMO_API_URL", "")
AMO_CLIENT_ID = os.getenv("AMO_CLIENT_ID", "")
AMO_CLIENT_SECRET = os.getenv("AMO_CLIENT_SECRET", "")
AMO_REDIRECT_URI = os.getenv("AMO_REDIRECT_URI", "")
AMO_REFRESH_TOKEN = os.getenv("AMO_REFRESH_TOKEN", "")
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")
AMO_PIPELINE_ID = os.getenv("AMO_PIPELINE_ID", "0")


# =======================================
#     üîÅ  –û–ë–ù–û–í–õ–ï–ù–ò–ï ACCESS TOKEN
# =======================================

async def refresh_access_token() -> str:
    """üîÅ –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω amoCRM —á–µ—Ä–µ–∑ refresh_token –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ .env."""
    url = f"{AMO_API_URL}/oauth2/access_token"
    payload = {
        "client_id": AMO_CLIENT_ID,
        "client_secret": AMO_CLIENT_SECRET,
        "grant_type": "refresh_token",
        "refresh_token": AMO_REFRESH_TOKEN,
        "redirect_uri": AMO_REDIRECT_URI,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, timeout=AMO_REQUEST_TIMEOUT_SEC) as resp:  # üî¥
            if resp.status != 200:
                text = await resp.text()
                raise RuntimeError(f"Token refresh failed [{resp.status}]: {text}")

            data = await resp.json()
            new_token = data["access_token"]
            new_refresh = data.get("refresh_token", AMO_REFRESH_TOKEN)

            # üî¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env
            lines = []
            with open(ENV_PATH, "r", encoding="utf-8") as f:
                for line in f:
                    if line.startswith("AMO_ACCESS_TOKEN="):
                        line = f"AMO_ACCESS_TOKEN={new_token}\n"
                    elif line.startswith("AMO_REFRESH_TOKEN="):
                        line = f"AMO_REFRESH_TOKEN={new_refresh}\n"
                    lines.append(line)
            with open(ENV_PATH, "w", encoding="utf-8") as f:
                f.writelines(lines)

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os.environ["AMO_ACCESS_TOKEN"] = new_token
            os.environ["AMO_REFRESH_TOKEN"] = new_refresh

            logging.info("‚úÖ amoCRM token refreshed successfully")
            return new_token


# =======================================
#      üîß –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê + –°–î–ï–õ–ö–ò
# =======================================

# üîÅ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def create_lead_in_amo(chat_id: int, username: str) -> str | None:
    """–°–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ amoCRM, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç lead_id."""
    access_token = os.getenv("AMO_ACCESS_TOKEN")
    if not access_token:
        logging.warning("‚ö†Ô∏è No AMO_ACCESS_TOKEN in env")
        return None

    try:
        async with aiohttp.ClientSession() as s:
            # üîπ —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç
            contact = {"name": username or f"Telegram {chat_id}"}
            async with s.post(
                f"{AMO_API_URL}/api/v4/contacts",
                headers={"Authorization": f"Bearer {access_token}"},
                json=[contact],
            ) as r:
                txt = await r.text()
                logging.info(f"üì° Contact resp [{r.status}]: {txt}")
                if r.status != 200:
                    if r.status == 401:
                        logging.warning("‚ö†Ô∏è Token expired during contact creation ‚Äî refreshing...")
                        await refresh_access_token()
                        return await create_lead_in_amo(chat_id, username)
                    logging.warning(f"‚ùå Contact creation failed [{r.status}]: {txt}")
                    return None
                res = await r.json()
                # –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ amoCRM ‚Äî id –≤–Ω—É—Ç—Ä–∏ _embedded
                contact_id = None
                if isinstance(res, dict):
                    embedded = res.get("_embedded", {})
                    contacts = embedded.get("contacts", [])
                    if contacts and isinstance(contacts, list):
                        contact_id = contacts[0].get("id")

                if not contact_id:
                    logging.warning(f"‚ö†Ô∏è Could not parse contact_id from response: {res}")
                    return None

            # üîπ —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
            lead = {
                "name": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({username})",
                "pipeline_id": int(AMO_PIPELINE_ID),
                "_embedded": {"contacts": [{"id": contact_id}]},
            }
            async with s.post(
                f"{AMO_API_URL}/api/v4/leads",
                headers={"Authorization": f"Bearer {access_token}"},
                json=[lead],
            ) as r:
                txt = await r.text()
                logging.info(f"üì° Lead resp [{r.status}]: {txt}")
                if r.status == 401:
                    logging.warning("‚ö†Ô∏è Token expired during lead creation ‚Äî refreshing...")
                    await refresh_access_token()
                    return await create_lead_in_amo(chat_id, username)
                if r.status != 200:
                    logging.warning(f"‚ùå Lead creation failed [{r.status}]: {txt}")
                    return None
                data = await r.json()
                lead_id = None
                if isinstance(data, dict):
                    embedded = data.get("_embedded", {})
                    leads = embedded.get("leads", [])
                    if leads and isinstance(leads, list):
                        lead_id = leads[0].get("id")

                if not lead_id:
                    logging.warning(f"‚ö†Ô∏è Could not parse lead_id from response: {data}")
                    return None

                logging.info(f"‚úÖ Created amoCRM lead {lead_id} for chat_id={chat_id}")
                return lead_id

    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Exception in create_lead_in_amo: {e}")
        import traceback
        logging.warning(traceback.format_exc())
        return None

# amo_client.py ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
async def add_text_note(lead_id: str, text: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –∫ —Å–¥–µ–ª–∫–µ.
    """
    access_token = os.getenv("AMO_ACCESS_TOKEN")
    if not access_token:
        logging.warning("‚ö†Ô∏è No AMO_ACCESS_TOKEN in env")
        return False

    payload = [{
        "entity_id": int(lead_id),
        "note_type": "common",
        "params": {"text": text[:8000]},  # –∑–∞—â–∏—Ç–∏–º—Å—è –æ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–≥–æ
    }]

    url = f"{AMO_API_URL}/api/v4/leads/notes"
    try:
        async with aiohttp.ClientSession() as s:
            async with s.post(
                url,
                headers={"Authorization": f"Bearer {access_token}"},
                json=payload,
            ) as r:
                if r.status == 401:
                    await refresh_access_token()
                    return await add_text_note(lead_id, text)
                txt = await r.text()
                ok = 200 <= r.status < 300
                logging.info(f"üìé add_text_note resp [{r.status}]: {txt}")
                return ok
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è add_text_note exception: {e}")
        return False


async def add_file_note(lead_id: str, uuid: str, file_name: str = "") -> bool:
    """
    –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (uuid) –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É-attachment –∫ —Å–¥–µ–ª–∫–µ.
    """
    access_token = os.getenv("AMO_ACCESS_TOKEN")
    if not access_token:
        logging.warning("‚ö†Ô∏è No AMO_ACCESS_TOKEN in env")
        return False

    payload = [{
        "entity_id": int(lead_id),
        "note_type": "attachment",
        "params": {
            "attachments": [{
                "file_name": file_name or "file.bin",
                "uuid": uuid,
            }]
        },
    }]

    url = f"{AMO_API_URL}/api/v4/leads/notes"
    try:
        async with aiohttp.ClientSession() as s:
            async with s.post(
                url,
                headers={"Authorization": f"Bearer {access_token}"},
                json=payload,
            ) as r:
                if r.status == 401:
                    await refresh_access_token()
                    return await add_file_note(lead_id, uuid, file_name)
                txt = await r.text()
                ok = 200 <= r.status < 300
                logging.info(f"üìé add_file_note resp [{r.status}]: {txt}")
                return ok
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è add_file_note exception: {e}")
        return False
    
# amo_client.py ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# =======================================
#      üß© amoCRM Chat API (origin/custom)
# =======================================

# --- helpers (–æ—Å—Ç–∞–≤—å—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏) -------------------------------


def _rfc2822_now_utc() -> str:
    """RFC2822-—Çimestamp –≤ UTC –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Date (–ø—Ä–∏–º–µ—Ä amo)."""
    now = datetime.datetime.now(datetime.timezone.utc)
    return now.strftime("%a, %d %b %Y %H:%M:%S +0000")  # –±–µ–∑ 'GMT'


def _md5_hex_lower(data: bytes) -> str:
    """MD5 —Ç–µ–ª–∞, hex lower."""
    return hashlib.md5(data).hexdigest().lower()


def _md5_base64(data: bytes) -> str:
    """MD5 —Ç–µ–ª–∞, base64 (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã amojo —Ç—Ä–µ–±—É—é—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ)."""
    dig = hashlib.md5(data).digest()
    return base64.b64encode(dig).decode("ascii")


def _hmac_sha1_hex(src: str, secret: str) -> str:
    """HMAC-SHA1(src, secret) ‚Üí hex lower."""
    return hmac.new(secret.encode("utf-8"),
                    src.encode("utf-8"),
                    hashlib.sha1).hexdigest().lower()

# --- –æ—Ç–ø—Ä–∞–≤–∫–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏; –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ) -------


async def send_chat_message_v2(
    scope_id: str,
    chat_id: int,
    text: str,
    username: str | None = None,
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ new_message –≤ Chat API (origin/custom) —Å –∞–≤—Ç–æ-—Ä–µ—Ç—Ä–∞–µ–º:
    1) –ü–ª–æ—Ç–Ω—ã–π JSON (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤), snake+camel –¥—É–±–ª–∏ –∫–ª—é—á–µ–π,
       user+sender ‚Äî —á—Ç–æ–± –ø—Ä–æ–π—Ç–∏ —Ä–∞–∑–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã.
    2) –ü—ã—Ç–∞–µ–º—Å—è —Å MD5 hex ‚Üí –µ—Å–ª–∏ 400/VALIDATION_ERROR, —Ä–µ—Ç—Ä–∞–∏–º —Å MD5 base64.
    3) –ü–æ–¥–ø–∏—Å—å —Å–æ–±–∏—Ä–∞–µ–º —Ä–æ–≤–Ω–æ: METHOD, MD5, Content-Type, Date(RFC2822), path.
    """

    secret = os.getenv("AMO_CHAT_SECRET", "")
    if not secret or not scope_id:
        logging.warning("‚ö†Ô∏è Chat v2: secret/scope –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return False

    cid = f"tg_{chat_id}"  # –≤–Ω–µ—à–Ω–∏–π ID –¥–∏–∞–ª–æ–≥–∞ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ

    # ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Ç–µ–ª–æ + ¬´–¥–≤–æ–π–Ω—ã–µ¬ª –∫–ª—é—á–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ‚Äî
    payload = {
        "event_type": "new_message",
        "payload": {
            "conversation_id": cid,
            "conversationId": cid,
            "conversation": {"id": cid},
            "message": {"type": "text", "text": (text or "")[:4000]},
            "user": {"id": str(chat_id), "name": (username or f"User {chat_id}")[:128]},
            "sender": {"id": str(chat_id), "name": (username or f"User {chat_id}")[:128]},
        },
    }

    body = json.dumps(payload, ensure_ascii=False, separators=(",", ":"))
    body_bytes = body.encode("utf-8")

    path = f"/v2/origin/custom/{scope_id}/chats"
    url = f"https://amojo.amocrm.ru{path}"
    ctype = "application/json"

    async def _post_with(md5_value: str) -> tuple[int, str]:
        """–°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ —É–∫–∞–∑–∞–Ω–Ω—ã–π MD5 –∏ —à–ª—ë–º."""
        date_hdr = _rfc2822_now_utc()  # –ø—Ä–∏–º–µ—Ä –∏–∑ –¥–æ–∫–æ–≤ ‚Äî RFC2822 +0000
        sign_src = "\n".join(["POST", md5_value, ctype, date_hdr, path])
        sign = _hmac_sha1_hex(sign_src, secret)

        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥ ‚Äî –ø–æ–º–æ–∂–µ—Ç, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –Ω–µ –∑–∞–π–¥—ë—Ç
        logging.info("üîê ChatAPI v2 sign src: %s", sign_src)

        async with aiohttp.ClientSession() as s:
            async with s.post(
                url,
                data=body_bytes,
                headers={
                    "Date": date_hdr,
                    "Content-Type": ctype,
                    "Content-MD5": md5_value,
                    "X-Signature": sign,
                    "Accept": "application/json",
                },
                timeout=AMO_REQUEST_TIMEOUT_SEC,
            ) as r:
                return r.status, await r.text()

    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π payload (—É—Å–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç)
    try:
        dbg = json.loads(body)
        dbg["payload"]["message"]["text"] = dbg["payload"]["message"]["text"][:120]
        logging.info("üí¨ ChatAPI v2 payload: %s", json.dumps(dbg, ensure_ascii=False))
    except Exception:
        pass

    # 1-—è –ø–æ–ø—ã—Ç–∫–∞: MD5 hex
    md5_hex = _md5_hex_lower(body_bytes)
    st, txt = await _post_with(md5_hex)
    logging.info("üí¨ ChatAPI v2 send [hex][%s]: %s", st, txt)
    if 200 <= st < 300:
        return True

    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä ¬´–Ω–µ –≤–∏–¥–∏—Ç¬ª –ø–æ–ª—è ‚Äî –ø—Ä–æ–±—É–µ–º MD5 base64 (—á–∞—Å—Ç—ã–π –∫–µ–π—Å)
    if st == 400 and "VALIDATION_ERROR" in txt and (
        "ConversationId" in txt or "User" in txt
    ):
        md5_b64 = _md5_base64(body_bytes)
        st2, txt2 = await _post_with(md5_b64)
        logging.info("üí¨ ChatAPI v2 send [b64][%s]: %s", st2, txt2)
        return 200 <= st2 < 300

    return False
