# -*- coding: utf-8 -*-
"""
–ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –ù–∞–¥—ë–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å OAuth2 —Ç–æ–∫–µ–Ω–∞–º–∏: JSON-–∫—ç—à, file-lock, –∞–≤—Ç–æ-—Ä–µ—Ç—Ä–∞–π 401.
- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤/—Å–¥–µ–ª–æ–∫, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫.
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Chat API v2 (origin/custom).
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ .env –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ (access/refresh) + –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ os.environ.

–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (–≤–∞—Ä–∏–∞–Ω—Ç 2 ‚Äî ¬´–ª–µ–Ω–∏–≤—ã–π —Ä–µ—Ñ—Ä–µ—à¬ª):
- –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.
- –õ—é–±–æ–π –∑–∞–ø—Ä–æ—Å –∏–¥—ë—Ç —Å —Ç–µ–∫—É—â–∏–º access_token.
- –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 401 ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –¥–µ–ª–∞–µ–º refresh –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å.
"""

from __future__ import annotations

import asyncio
import base64  # –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è—Ö
import binascii
import datetime as dt
import hashlib
import hmac
import json
import logging
import os
from pathlib import Path
from typing import Any, Dict, Optional, Tuple

import aiohttp
from dotenv import load_dotenv

from constants import AMO_REQUEST_TIMEOUT_SEC
from storage import get_lead_id, set_lead_id  # —Å–≤—è–∑—å chat_id ‚Üî lead_id


# ---------------------------
#   –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è .env
# ---------------------------

ENV_PATH = "/var/www/medbot/.env"
if os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH)

AMO_API_URL = os.getenv("AMO_API_URL", "").rstrip("/")
AMO_CLIENT_ID = os.getenv("AMO_CLIENT_ID", "")
AMO_CLIENT_SECRET = os.getenv("AMO_CLIENT_SECRET", "")
AMO_REDIRECT_URI = os.getenv("AMO_REDIRECT_URI", "")
AMO_PIPELINE_ID = int(os.getenv("AMO_PIPELINE_ID", "0"))

# Chat API (origin/custom)
AMO_CHAT_SECRET = os.getenv("AMO_CHAT_SECRET", "")
AMO_CHAT_SCOPE_ID = os.getenv("AMO_CHAT_SCOPE_ID", "")

# ---------------------------
#     –ü—É—Ç–∏/–∫–∞—Ç–∞–ª–æ–≥–∏ –∫—ç—à–∞
# ---------------------------

RUNTIME_DIR = Path("/var/www/medbot/runtime")
RUNTIME_DIR.mkdir(parents=True, exist_ok=True)

TOKENS_CACHE = RUNTIME_DIR / "amo_tokens.json"
TOKENS_LOCK = asyncio.Lock()  # process-local lock (–æ—Ç –≥–æ–Ω–æ–∫ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ)


# ======================================================================
#                         –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤
# ======================================================================

class AmoTokenManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤:
    - —Ö—Ä–∞–Ω–∏—Ç access/refresh –≤ JSON-–∫—ç—à–µ (runtime),
    - –¥—É–±–ª–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ .env,
    - —É–º–µ–µ—Ç –¥–µ–ª–∞—Ç—å refresh c file-safe –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é,
    - –æ—Ç–¥–∞—ë—Ç access_token –±–µ–∑ —Ä–µ—Ñ—Ä–µ—à–∞ (–ª–µ–Ω–∏–≤–æ).
    """

    def __init__(self,
                 env_path: str = ENV_PATH,
                 cache_path: Path = TOKENS_CACHE) -> None:
        self._env_path = env_path
        self._cache_path = cache_path

    # --- –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ helpers -------------------------------------

    def _read_env_pairs(self) -> Dict[str, str]:
        """–ß–∏—Ç–∞–µ—Ç .env –ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤ dict (–±–µ–∑ –ø–µ—Ä–µ–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏)."""
        pairs: Dict[str, str] = {}
        if not os.path.exists(self._env_path):
            return pairs
        with open(self._env_path, "r", encoding="utf-8") as f:
            for raw in f:
                line = raw.rstrip("\n")
                if not line or line.startswith("#") or "=" not in line:
                    continue
                k, v = line.split("=", 1)
                pairs[k] = v
        return pairs

    def _write_env_pairs(self, pairs: Dict[str, str]) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç .env –∏–∑ dict (—Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
        –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –≤–≤–µ—Ä—Ö—É, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–∏–∂–µ –∫–∞–∫ –±—ã–ª–æ)."""
        order = [
            "AMO_API_URL",
            "AMO_CLIENT_ID",
            "AMO_CLIENT_SECRET",
            "AMO_REDIRECT_URI",
            "AMO_ACCESS_TOKEN",
            "AMO_REFRESH_TOKEN",
            "AMO_PIPELINE_ID",
            "AMO_CHAT_SECRET",
            "AMO_CHAT_SCOPE_ID",
        ]
        existing = self._read_env_pairs()
        existing.update(pairs)
        lines: list[str] = []
        # –°–Ω–∞—á–∞–ª–∞ ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–ª—é—á–∏ –≤ –ø–æ—Ä—è–¥–∫–µ:
        for k in order:
            if k in existing:
                lines.append(f"{k}={existing[k]}\n")
                existing.pop(k, None)
        # –ó–∞—Ç–µ–º ‚Äî –≤—Å–µ –ø—Ä–æ—á–∏–µ, –∫–∞–∫ –µ—Å—Ç—å:
        for k, v in existing.items():
            lines.append(f"{k}={v}\n")
        tmp = self._env_path + ".tmp"
        with open(tmp, "w", encoding="utf-8") as f:
            f.writelines(lines)
        os.replace(tmp, self._env_path)

    def _load_cache(self) -> Tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (access, refresh) –∏–∑ JSON-–∫—ç—à–∞ –ª–∏–±–æ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        if self._cache_path.exists():
            try:
                with open(self._cache_path, "r", encoding="utf-8") as f:
                    obj = json.load(f)
                return obj.get("access_token", ""), obj.get("refresh_token", "")
            except Exception:
                logging.warning("‚ö†Ô∏è tokens cache read failed, ignore")

        return os.getenv("AMO_ACCESS_TOKEN", ""), os.getenv(
            "AMO_REFRESH_TOKEN", ""
        )

    def _save_cache(self, access: str, refresh: str) -> None:
        """–ê—Ç–æ–º–∞—Ä–Ω–æ –ø–∏—à–µ—Ç JSON-–∫—ç—à —Å —Ç–æ–∫–µ–Ω–∞–º–∏."""
        tmp = self._cache_path.with_suffix(".tmp")
        with open(tmp, "w", encoding="utf-8") as f:
            json.dump(
                {"access_token": access, "refresh_token": refresh},
                f,
                ensure_ascii=False,
            )
        os.replace(tmp, self._cache_path)

    # --- –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã -------------------------------------------

    def get_access_pair(self) -> Tuple[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (access, refresh) –ë–ï–ó —Ä–µ—Ñ—Ä–µ—à–∞ (–ª–µ–Ω–∏–≤–æ)."""
        access, refresh = self._load_cache()
        if not access:
            access = os.getenv("AMO_ACCESS_TOKEN", "")
        if not refresh:
            refresh = os.getenv("AMO_REFRESH_TOKEN", "")
        return access, refresh

    async def refresh_tokens(self) -> str:
        """
        –î–µ–ª–∞–µ—Ç refresh_token ‚Üí access/refresh.
        –ê—Ç–æ–º–∞—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç: JSON-–∫—ç—à, .env, os.environ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π access_token.
        """
        async with TOKENS_LOCK:
            _, refresh = self.get_access_pair()
            if not refresh:
                raise RuntimeError("No AMO_REFRESH_TOKEN to refresh")

            url = f"{AMO_API_URL}/oauth2/access_token"
            payload = {
                "client_id": AMO_CLIENT_ID,
                "client_secret": AMO_CLIENT_SECRET,
                "grant_type": "refresh_token",
                "refresh_token": refresh,
                "redirect_uri": AMO_REDIRECT_URI,
            }

            async with aiohttp.ClientSession() as s:
                async with s.post(
                    url,
                    json=payload,
                    timeout=AMO_REQUEST_TIMEOUT_SEC,
                ) as r:
                    body = await r.text()
                    if r.status != 200:
                        raise RuntimeError(
                            f"Token refresh failed [{r.status}]: {body}"
                        )
                    data = await r.json()

            new_access = data["access_token"]
            new_refresh = data.get("refresh_token", refresh)

            # JSON-–∫—ç—à
            self._save_cache(new_access, new_refresh)
            # .env
            self._write_env_pairs(
                {
                    "AMO_ACCESS_TOKEN": new_access,
                    "AMO_REFRESH_TOKEN": new_refresh,
                }
            )
            # –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os.environ["AMO_ACCESS_TOKEN"] = new_access
            os.environ["AMO_REFRESH_TOKEN"] = new_refresh

            logging.info("‚úÖ amoCRM token refreshed")
            return new_access


# singleton –º–µ–Ω–µ–¥–∂–µ—Ä
TOKEN_MANAGER = AmoTokenManager()


# ======================================================================
#                    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ amoCRM API
# ======================================================================

async def amo_request(method: str,
                      path: str,
                      *,
                      params: Optional[Dict[str, Any]] = None,
                      json_body: Optional[Any] = None,
                      data: Optional[Any] = None) -> aiohttp.ClientResponse:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ amoCRM —Å –∞–≤—Ç–æ-—Ä–µ—Ç—Ä–∞–µ–º –ø–æ—Å–ª–µ 401.

    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    - –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–π access_token (–±–µ–∑ —Ä–µ—Ñ—Ä–µ—à–∞).
    - –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç 401 ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ refresh + –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞.
    """
    if not path.startswith("/"):
        path = "/" + path
    url = f"{AMO_API_URL}{path}"

    access, _ = TOKEN_MANAGER.get_access_pair()
    headers = {"Authorization": f"Bearer {access}"}

    async with aiohttp.ClientSession() as s:
        resp = await s.request(
            method.upper(),
            url,
            params=params,
            json=json_body,
            data=data,
            headers=headers,
            timeout=AMO_REQUEST_TIMEOUT_SEC,
        )
        if resp.status != 401:
            return resp

        # 401 ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        await resp.read()  # –æ—Å–≤–æ–±–æ–¥–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        logging.warning("üîÅ 401 from amoCRM ‚Äî refreshing tokens and retry ...")
        await TOKEN_MANAGER.refresh_tokens()

        access2, _ = TOKEN_MANAGER.get_access_pair()
        headers["Authorization"] = f"Bearer {access2}"
        return await s.request(
            method.upper(),
            url,
            params=params,
            json=json_body,
            data=data,
            headers=headers,
            timeout=AMO_REQUEST_TIMEOUT_SEC,
        )


# ======================================================================
#                –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ / —Å–¥–µ–ª–∫–∏ –∏ –∑–∞–º–µ—Ç–æ–∫
# ======================================================================

async def create_contact(name: str) -> Optional[int]:
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∏–ª–∏ None."""
    payload = [{"name": name}]
    resp = await amo_request("POST", "/api/v4/contacts", json_body=payload)
    txt = await resp.text()
    logging.info("üì° create_contact [%s]: %s", resp.status, txt)
    if resp.status != 200:
        return None
    data = await resp.json()
    emb = data.get("_embedded", {})
    items = emb.get("contacts", [])
    return items[0]["id"] if items else None


async def create_lead(contact_id: int,
                      title: str,
                      pipeline_id: int) -> Optional[int]:
    """–°–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∏–ª–∏ None."""
    payload = [{
        "name": title,
        "pipeline_id": int(pipeline_id),
        "_embedded": {"contacts": [{"id": int(contact_id)}]},
    }]
    resp = await amo_request("POST", "/api/v4/leads", json_body=payload)
    txt = await resp.text()
    logging.info("üì° create_lead [%s]: %s", resp.status, txt)
    if resp.status != 200:
        return None
    data = await resp.json()
    emb = data.get("_embedded", {})
    items = emb.get("leads", [])
    return items[0]["id"] if items else None


async def add_text_note(lead_id: int, text: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É –∫ —Å–¥–µ–ª–∫–µ."""
    payload = [{
        "entity_id": int(lead_id),
        "note_type": "common",
        "params": {"text": text[:8000]},
    }]
    resp = await amo_request("POST", "/api/v4/leads/notes", json_body=payload)
    txt = await resp.text()
    logging.info("üìé add_text_note [%s]: %s", resp.status, txt)
    return 200 <= resp.status < 300


async def add_file_note(lead_id: int,
                        uuid: str,
                        file_name: str = "file.bin") -> bool:
    """–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É-attachment."""
    payload = [{
        "entity_id": int(lead_id),
        "note_type": "attachment",
        "params": {"attachments": [{"file_name": file_name, "uuid": uuid}]},
    }]
    resp = await amo_request("POST", "/api/v4/leads/notes", json_body=payload)
    txt = await resp.text()
    logging.info("üìé add_file_note [%s]: %s", resp.status, txt)
    return 200 <= resp.status < 300


async def create_lead_in_amo(chat_id: int, username: str) -> Optional[int]:
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ: —Å–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É, –∫—ç—à–∏—Ä—É–µ—Ç lead_id –≤ Redis.
    """
    name = username or f"Telegram {chat_id}"
    cid = await create_contact(name)
    if not cid:
        logging.warning("‚ùå create_contact failed")
        return None

    title = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({name})"
    lid = await create_lead(cid, title, AMO_PIPELINE_ID)
    if not lid:
        logging.warning("‚ùå create_lead failed")
        return None

    await set_lead_id(chat_id, str(lid))
    logging.info("‚úÖ lead %s created and cached for chat_id=%s", lid, chat_id)
    return lid


# ======================================================================
#                      Chat API v2 (origin/custom)
# ======================================================================

def _md5_hex_lower(data: bytes) -> str:
    """MD5(bytes) ‚Üí hex lower."""
    return hashlib.md5(data).hexdigest().lower()


def _rfc1123_now_gmt() -> str:
    """–î–∞—Ç–∞ –≤ RFC1123 ('GMT'), –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç amojo."""
    from email.utils import formatdate
    return formatdate(usegmt=True)


def _hmac_sha1_hex_ascii(src: str, secret_ascii: str) -> str:
    """
    HMAC-SHA1(src, key) ‚Üí hex lower.

    –ö–ª—é—á —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ ASCII-—Å—Ç—Ä–æ–∫—É (–Ω–∞—à –∫–∞–Ω–∞–ª –æ–∂–∏–¥–∞–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–∞–∫).
    """
    key = secret_ascii.encode("utf-8")
    mac = hmac.new(key, src.encode("utf-8"), hashlib.sha1)
    return mac.hexdigest().lower()


async def send_chat_message_v2(scope_id: str,
                               chat_id: int,
                               text: str,
                               username: Optional[str] = None) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ 'new_message' –≤ Chat API.

    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞:
    - conversation_id –∏ user ‚Äî –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ –æ–±—ä–µ–∫—Ç–∞;
    - payload —Å–æ–¥–µ—Ä–∂–∏—Ç message{type,text};
    - –ø–æ–¥–ø–∏—Å—å: METHOD, MD5(hex), Content-Type, Date, PATH.
    """
    secret = AMO_CHAT_SECRET
    if not secret:
        logging.warning("‚ö†Ô∏è Chat v2: AMO_CHAT_SECRET empty")
        return False
    if not scope_id:
        logging.warning("‚ö†Ô∏è Chat v2: scope_id empty")
        return False

    body = {
        "event_type": "new_message",
        "conversation_id": f"tg_{chat_id}",
        "user": {
            "id": str(chat_id),
            "name": username or f"User {chat_id}",
        },
        "payload": {
            "message": {"type": "text", "text": (text or "")[:4000]}
        },
    }
    body_bytes = json.dumps(
        body, ensure_ascii=False, separators=(",", ":")
    ).encode("utf-8")

    content_md5 = _md5_hex_lower(body_bytes)   # hex (–≤–∞–∂–Ω–æ)
    content_type = "application/json"
    date_gmt = _rfc1123_now_gmt()
    path = f"/v2/origin/custom/{scope_id}/chats"

    sign_src = "\n".join(
        ["POST", content_md5, content_type, date_gmt, path]
    )
    signature = _hmac_sha1_hex_ascii(sign_src, secret)

    url = f"https://amojo.amocrm.ru{path}"
    try:
        logging.info("üí¨ ChatAPI v2 payload(top): %s", body)
        async with aiohttp.ClientSession() as s:
            async with s.post(
                url,
                data=body_bytes,
                headers={
                    "Date": date_gmt,
                    "Content-Type": content_type,
                    "Content-MD5": content_md5,
                    "X-Signature": signature,
                },
                timeout=AMO_REQUEST_TIMEOUT_SEC,
            ) as r:
                txt = await r.text()
                logging.info("üí¨ ChatAPI v2 send [%s]: %s", r.status, txt)
                return 200 <= r.status < 300
    except Exception as exc:
        logging.warning("‚ö†Ô∏è ChatAPI v2 send exception: %s", exc)
        return False
