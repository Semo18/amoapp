# amo_client.py
# üî¥ –ü–æ–¥—Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å amoCRM:
# - –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø–æ refresh_token
# - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–¥–µ–ª–æ–∫
# - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å–¥–µ–ª–∫–∞–º
# - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∫–∏ chat_id ‚Üí lead_id –≤ Redis

import os, aiohttp, asyncio, logging
from dotenv import load_dotenv
from pathlib import Path
from storage import set_lead_id, get_lead_id  # üî¥ —Å–≤—è–∑—å chat_id ‚Üí lead_id
from typing import Optional

# =============================
#        –ù–ê–°–¢–†–û–ô–ö–ê –û–ö–†–£–ñ–ï–ù–ò–Ø
# =============================

ENV_PATH = "/var/www/medbot/.env"  # –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH)

AMO_API_URL = os.getenv("AMO_API_URL", "")
AMO_CLIENT_ID = os.getenv("AMO_CLIENT_ID", "")
AMO_CLIENT_SECRET = os.getenv("AMO_CLIENT_SECRET", "")
AMO_REDIRECT_URI = os.getenv("AMO_REDIRECT_URI", "")
AMO_REFRESH_TOKEN = os.getenv("AMO_REFRESH_TOKEN", "")
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")
AMO_PIPELINE_ID = os.getenv("AMO_PIPELINE_ID", "0")


# =======================================
#     üîÅ  –û–ë–ù–û–í–õ–ï–ù–ò–ï ACCESS TOKEN
# =======================================

async def refresh_access_token() -> str:
    """üîÅ –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω amoCRM —á–µ—Ä–µ–∑ refresh_token –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ .env."""
    url = f"{AMO_API_URL}/oauth2/access_token"
    payload = {
        "client_id": AMO_CLIENT_ID,
        "client_secret": AMO_CLIENT_SECRET,
        "grant_type": "refresh_token",
        "refresh_token": AMO_REFRESH_TOKEN,
        "redirect_uri": AMO_REDIRECT_URI,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=payload, timeout=15) as resp:
            if resp.status != 200:
                text = await resp.text()
                raise RuntimeError(f"Token refresh failed [{resp.status}]: {text}")

            data = await resp.json()
            new_token = data["access_token"]
            new_refresh = data.get("refresh_token", AMO_REFRESH_TOKEN)

            # üî¥ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –≤ .env
            lines = []
            with open(ENV_PATH, "r", encoding="utf-8") as f:
                for line in f:
                    if line.startswith("AMO_ACCESS_TOKEN="):
                        line = f"AMO_ACCESS_TOKEN={new_token}\n"
                    elif line.startswith("AMO_REFRESH_TOKEN="):
                        line = f"AMO_REFRESH_TOKEN={new_refresh}\n"
                    lines.append(line)
            with open(ENV_PATH, "w", encoding="utf-8") as f:
                f.writelines(lines)

            # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            os.environ["AMO_ACCESS_TOKEN"] = new_token
            os.environ["AMO_REFRESH_TOKEN"] = new_refresh

            logging.info("‚úÖ amoCRM token refreshed successfully")
            return new_token


# =======================================
#      üîß –°–û–ó–î–ê–ù–ò–ï –ö–û–ù–¢–ê–ö–¢–ê + –°–î–ï–õ–ö–ò
# =======================================

async def create_lead_in_amo(chat_id: int, username: str) -> Optional[int]:
    """
    üî¥ –°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É –≤ amoCRM, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID —Å–¥–µ–ª–∫–∏ (lead_id) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    access_token = os.getenv("AMO_ACCESS_TOKEN")
    if not access_token:
        logging.warning("‚ö†Ô∏è No AMO_ACCESS_TOKEN in environment")
        return None

    # –µ—Å–ª–∏ —Å–¥–µ–ª–∫–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    existing_lead = get_lead_id(chat_id)
    if existing_lead:
        logging.info(f"‚ôªÔ∏è Lead already exists for chat_id={chat_id}: {existing_lead}")
        return int(existing_lead)

    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as s:
            headers = {
                "Authorization": f"Bearer {access_token}",
                "Content-Type": "application/json",
            }

            # --- —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç ---
            contact_payload = {"name": username or f"Telegram {chat_id}"}
            async with s.post(
                f"{AMO_API_URL}/api/v4/contacts",
                headers=headers,
                json=[contact_payload],
            ) as contact_resp:
                if contact_resp.status == 401:
                    # —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    logging.warning("‚ö†Ô∏è Token expired during contact creation, refreshing...")
                    await refresh_access_token()
                    return await create_lead_in_amo(chat_id, username)

                if contact_resp.status != 200:
                    err = await contact_resp.text()
                    logging.warning(f"‚ö†Ô∏è Contact creation failed [{contact_resp.status}]: {err}")
                    return None

                contact_data = await contact_resp.json()
                contact_id = contact_data[0]["id"]

            # --- —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É ---
            lead_payload = {
                "name": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({username})",
                "pipeline_id": int(AMO_PIPELINE_ID),
                "_embedded": {"contacts": [{"id": contact_id}]},
            }

            async with s.post(
                f"{AMO_API_URL}/api/v4/leads",
                headers=headers,
                json=[lead_payload],
            ) as lead_resp:
                if lead_resp.status == 401:
                    logging.warning("‚ö†Ô∏è Token expired during lead creation, refreshing...")
                    await refresh_access_token()
                    return await create_lead_in_amo(chat_id, username)

                if lead_resp.status != 200:
                    err = await lead_resp.text()
                    logging.warning(f"‚ùå Lead creation failed [{lead_resp.status}]: {err}")
                    return None

                lead_data = await lead_resp.json()
                lead_id = lead_data[0]["id"]

                # üî¥ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å chat_id ‚Üí lead_id –≤ Redis
                set_lead_id(chat_id, lead_id)

                logging.info(f"‚úÖ Created amoCRM lead {lead_id} for chat_id={chat_id}")
                return lead_id

    except aiohttp.ClientError as e:
        logging.warning(f"‚ö†Ô∏è Network error in create_lead_in_amo: {e}")
        return None
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è Exception in create_lead_in_amo: {e}")
        return None
