 amo_client.py (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã, –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)

import os, aiohttp, asyncio, logging, json, hashlib, hmac, binascii
from dotenv import load_dotenv
from pathlib import Path
from typing import Optional
from constants import AMO_REQUEST_TIMEOUT_SEC
from storage import set_lead_id, get_lead_id  # —Å–≤—è–∑—å chat_id ‚Üí lead_id
import datetime

ENV_PATH = "/var/www/medbot/.env"
if os.path.exists(ENV_PATH):
    load_dotenv(ENV_PATH)

AMO_API_URL = os.getenv("AMO_API_URL", "")
AMO_CLIENT_ID = os.getenv("AMO_CLIENT_ID", "")
AMO_CLIENT_SECRET = os.getenv("AMO_CLIENT_SECRET", "")
AMO_REDIRECT_URI = os.getenv("AMO_REDIRECT_URI", "")
AMO_REFRESH_TOKEN = os.getenv("AMO_REFRESH_TOKEN", "")
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")
AMO_PIPELINE_ID = os.getenv("AMO_PIPELINE_ID", "0")


# =======================================
#      üîê –ú–µ–Ω–µ–¥–∂–µ—Ä OAuth-—Ç–æ–∫–µ–Ω–∞
# =======================================

class TokenManager:
    """–í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–∫–µ–Ω–æ–≤ —Å auto-refresh –∏ –∑–∞–ø–∏—Å—å—é –≤ .env."""
    _lock = asyncio.Lock()  # üî¥ –∑–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ—Ä–µ—à–∞

    @staticmethod
    def _read_env() -> dict:
        """–°—á–∏—Ç—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env (—Ñ–∞–π–ª ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã)."""
        env = {}
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if "=" in line:
                    k, v = line.rstrip("\n").split("=", 1)
                    env[k] = v
        return env

    @staticmethod
    def _write_env(upd: dict) -> None:
        """–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–∞—Ä—ã –∫–ª—é—á=–∑–Ω–∞—á–µ–Ω–∏–µ –≤ .env (–æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º)."""
        lines = []
        seen = set()
        with open(ENV_PATH, "r", encoding="utf-8") as f:
            for line in f:
                if "=" in line:
                    k, _ = line.rstrip("\n").split("=", 1)
                    if k in upd:
                        lines.append(f"{k}={upd[k]}\n")
                        seen.add(k)
                        continue
                lines.append(line)
        for k, v in upd.items():
            if k not in seen:
                lines.append(f"{k}={v}\n")
        with open(ENV_PATH, "w", encoding="utf-8") as f:
            f.writelines(lines)

    @classmethod
    async def refresh(cls) -> str:
        """üîÅ –û–±–Ω–æ–≤–ª—è–µ—Ç access/refresh —Ç–æ–∫–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ .env –∏ env."""
        async with cls._lock:  # üî¥ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–µ–ª–∞–µ—Ç refresh
            env = cls._read_env()
            url = f"{AMO_API_URL}/oauth2/access_token"
            payload = {
                "client_id": AMO_CLIENT_ID,
                "client_secret": AMO_CLIENT_SECRET,
                "grant_type": "refresh_token",
                "refresh_token": env.get("AMO_REFRESH_TOKEN", ""),
                "redirect_uri": AMO_REDIRECT_URI,
            }
            async with aiohttp.ClientSession() as s:
                async with s.post(
                    url, json=payload, timeout=AMO_REQUEST_TIMEOUT_SEC
                ) as r:
                    txt = await r.text()
                    if r.status != 200:
                        raise RuntimeError(
                            f"Token refresh failed [{r.status}]: {txt}"
                        )
                    data = await r.json()
            new_access = data["access_token"]
            new_refresh = data.get("refresh_token",
                                   env.get("AMO_REFRESH_TOKEN", ""))
            cls._write_env({
                "AMO_ACCESS_TOKEN": new_access,
                "AMO_REFRESH_TOKEN": new_refresh,
            })
            os.environ["AMO_ACCESS_TOKEN"] = new_access
            os.environ["AMO_REFRESH_TOKEN"] = new_refresh
            logging.info("‚úÖ amoCRM token refreshed and persisted")
            return new_access

    @classmethod
    async def bearer(cls) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞/–æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ refresh)."""
        token = os.getenv("AMO_ACCESS_TOKEN", "")
        if token:
            return token
        env = cls._read_env()
        token = env.get("AMO_ACCESS_TOKEN", "")
        if token:
            os.environ["AMO_ACCESS_TOKEN"] = token
        return token


# =======================================
#   üîß –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤—Ä–∞–ø–ø–µ—Ä REST-–∑–∞–ø—Ä–æ—Å–æ–≤
# =======================================

async def amo_request(method: str, path: str, **kw) -> aiohttp.ClientResponse:
    """
    –î–µ–ª–∞–µ—Ç REST-–∑–∞–ø—Ä–æ—Å c Bearer –∏ –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à–µ–º –Ω–∞ 401.
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
      1) –ü—ã—Ç–∞–µ–º—Å—è —Å —Ç–µ–∫—É—â–∏–º —Ç–æ–∫–µ–Ω–æ–º.
      2) –ï—Å–ª–∏ 401 ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –¥–µ–ª–∞–µ–º refresh –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º.
    """
    assert path.startswith("/"), "path –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '/'"
    url = f"{AMO_API_URL}{path}"

    token = await TokenManager.bearer()
    headers = kw.pop("headers", {})
    headers = {"Authorization": f"Bearer {token}", **headers}
    timeout = kw.pop("timeout", AMO_REQUEST_TIMEOUT_SEC)

    async with aiohttp.ClientSession() as s:
        async with s.request(method, url, headers=headers,
                             timeout=timeout, **kw) as r:
            if r.status != 401:
                return r
            # 401: –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
            logging.info("üîÅ 401 from amoCRM ‚Üí refreshing token...")
        await TokenManager.refresh()
        token = await TokenManager.bearer()
        headers["Authorization"] = f"Bearer {token}"
        async with aiohttp.ClientSession() as s2:
            return await s2.request(method, url, headers=headers,
                                    timeout=timeout, **kw)


# =======================================================
#      üß© CRUD –ø–æ –≤–∞—à–∏–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º(–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–∫–∏/–∑–∞–º–µ—Ç–∫–∏)
# =======================================================

async def create_lead_in_amo(chat_id: int, username: str) -> str | None:
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É. –ü–æ–≤—Ç–æ—Ä –Ω–∞ 401 –¥–µ–ª–∞–µ—Ç amo_request."""
    # –∫–æ–Ω—Ç–∞–∫—Ç
    contact_payload = [{"name": username or f"Telegram {chat_id}"}]
    r = await amo_request("POST", "/api/v4/contacts", json=contact_payload)
    txt = await r.text()
    logging.info("üì° Contact resp [%s]: %s", r.status, txt)
    if r.status != 200:
        return None
    data = await r.json()
    contact_id = (data.get("_embedded", {})
                      .get("contacts", [{}])[0].get("id"))
    if not contact_id:
        return None

    # —Å–¥–µ–ª–∫–∞
    lead_payload = [{
        "name": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({username})",
        "pipeline_id": int(AMO_PIPELINE_ID),
        "_embedded": {"contacts": [{"id": contact_id}]},
    }]
    r = await amo_request("POST", "/api/v4/leads", json=lead_payload)
    txt = await r.text()
    logging.info("üì° Lead resp [%s]: %s", r.status, txt)
    if r.status != 200:
        return None
    data = await r.json()
    lead_id = (data.get("_embedded", {})
                   .get("leads", [{}])[0].get("id"))
    if not lead_id:
        return None
    logging.info("‚úÖ Created lead %s for chat_id=%s", lead_id, chat_id)
    return str(lead_id)


async def add_text_note(lead_id: str, text: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É (—Å –∞–≤—Ç–æ-—Ä–µ—Ñ—Ä–µ—à–µ–º —Ç–æ–∫–µ–Ω–∞)."""
    payload = [{
        "entity_id": int(lead_id),
        "note_type": "common",
        "params": {"text": text[:8000]},
    }]
    r = await amo_request("POST", "/api/v4/leads/notes", json=payload)
    txt = await r.text()
    ok = 200 <= r.status < 300
    logging.info("üìé add_text_note resp [%s]: %s", r.status, txt)
    return ok


async def add_file_note(lead_id: str, uuid: str, file_name: str = "") -> bool:
    """–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ñ–∞–π–ª (uuid) –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É-attachment."""
    payload = [{
        "entity_id": int(lead_id),
        "note_type": "attachment",
        "params": {
            "attachments": [{
                "file_name": file_name or "file.bin",
                "uuid": uuid,
            }]
        },
    }]
    r = await amo_request("POST", "/api/v4/leads/notes", json=payload)
    txt = await r.text()
    ok = 200 <= r.status < 300
    logging.info("üìé add_file_note resp [%s]: %s", r.status, txt)
    return ok
    
# amo_client.py ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é —Ü–µ–ª–∏–∫–æ–º
# =======================================
#      üß© amoCRM Chat API (origin/custom)
# =======================================

# --- helpers (–æ—Å—Ç–∞–≤—å—Ç–µ —Ä—è–¥–æ–º —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º–∏) -------------------------------


def _md5_hex_lower(data: bytes) -> str:
    """
    –°—á–∏—Ç–∞–µ—Ç MD5 –æ—Ç –±–∞–π—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç hex –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º hex, —Ç.–∫. –∏–º–µ–Ω–Ω–æ —Ç–∞–∫ —Å–µ—Ä–≤–µ—Ä –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ –Ω–∞—à–µ–º
    –∞–∫–∫–∞—É–Ω—Ç–µ (–ø—Ä–∏ base64 –ø–æ–¥–ø–∏—Å—å –ø—Ä–∏–Ω–∏–º–∞–ª–∞—Å—å, –Ω–æ –º–µ–Ω—è–ª–∞—Å—å –æ—à–∏–±–∫–∞).
    """
    return hashlib.md5(data).hexdigest().lower()


def _rfc1123_now_gmt() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ RFC1123 (—Å 'GMT'), –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç amojo.
    """
    from email.utils import formatdate
    return formatdate(usegmt=True)


def _hmac_sha1_hex_ascii(src: str, secret_ascii: str) -> str:
    """
    HMAC-SHA1(src, key) –≤ hex lower.

    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    - –ö–ª—é—á —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ ASCII-—Å—Ç—Ä–æ–∫—É.
      –≠—Ç–æ –≤–∞–∂–Ω–æ: –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å–µ–∫—Ä–µ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ ASCII, –∞ –Ω–µ –∫–∞–∫
      hex-—Å—Ç—Ä–æ–∫–∞, –∏–Ω–∞—á–µ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ORIGIN_INVALID_SIGNATURE (403).
    """
    key = secret_ascii.encode("utf-8")  # üî¥ –∫–ª—é—á –∫–∞–∫ ascii-—Å—Ç—Ä–æ–∫–∞
    mac = hmac.new(key, src.encode("utf-8"), hashlib.sha1)
    return mac.hexdigest().lower()


async def send_chat_message_v2(
    scope_id: str,
    chat_id: int,
    text: str,
    username: Optional[str] = None,
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ 'new_message' –≤ Chat API (amojo) –¥–ª—è –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–≥–æ scope.

    –û–±—â–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1) –ü–æ–ª—è 'conversation_id' –∏ 'user' –∫–ª–∞–¥—ë–º –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å.
       –í 'payload' –ø–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ 'message'. –¢–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä.
    2) Content-MD5 —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ hex –æ—Ç —Ç–µ–ª–∞ (–±–µ–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ '\n').
    3) –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–ø–∏—Å–∏ (METHOD, MD5-hex, Content-Type, Date, path).
    4) –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º HMAC-SHA1 c ASCII-—Å–µ–∫—Ä–µ—Ç–æ–º –∫–∞–Ω–∞–ª–∞.
    5) POST –Ω–∞ https://amojo.amocrm.ru/v2/origin/custom/{scope_id}/chats.
    """

    secret = os.getenv("AMO_CHAT_SECRET", "")
    if not secret:
        logging.warning("‚ö†Ô∏è Chat v2: no AMO_CHAT_SECRET in env")
        return False
    if not scope_id:
        logging.warning("‚ö†Ô∏è Chat v2: empty scope_id")
        return False

    # --- —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (—Å–º. 1) –≤—ã—à–µ) ---
    body = {
        "event_type": "new_message",
        # —ç—Ç–∏ –¥–≤–∞ –ø–æ–ª—è ‚Äî –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –Ω–µ –≤–Ω—É—Ç—Ä–∏ payload  # üî¥
        "conversation_id": f"tg_{chat_id}",                   # üî¥
        "user": {                                              # üî¥
            "id": str(chat_id),
            "name": username or f"User {chat_id}",
        },
        # —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ payload
        "payload": {
            "message": {
                "type": "text",
                "text": (text or "")[:4000],
            }
        },
    }

    # —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å—Ç—Ä–æ–∫–∏
    body_bytes = json.dumps(body, ensure_ascii=False, separators=(",", ":")).encode(
        "utf-8"
    )
    content_type = "application/json"
    content_md5 = _md5_hex_lower(body_bytes)  # hex-—Ñ–æ—Ä–º–∞—Ç MD5  # üî¥
    date_gmt = _rfc1123_now_gmt()
    path = f"/v2/origin/custom/{scope_id}/chats"

    # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ‚Äî –ø–æ—Ä—è–¥–æ–∫ –∏ —Ä–µ–≥–∏—Å—Ç—Ä —Å—Ç—Ä–æ–≥–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã
    sign_src = "\n".join(
        ["POST", content_md5, content_type, date_gmt, path]
    )
    signature = _hmac_sha1_hex_ascii(sign_src, secret)  # üî¥ ASCII-–∫–ª—é—á

    url = f"https://amojo.amocrm.ru{path}"
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ö–µ–º—ã (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞)
        logging.info("üí¨ ChatAPI v2 payload(top): %s", body)

        async with aiohttp.ClientSession() as s:
            async with s.post(
                url,
                data=body_bytes,
                headers={
                    "Date": date_gmt,
                    "Content-Type": content_type,
                    "Content-MD5": content_md5,
                    "X-Signature": signature,
                },
                timeout=AMO_REQUEST_TIMEOUT_SEC,
            ) as r:
                txt = await r.text()
                logging.info("üí¨ ChatAPI v2 send [%s]: %s", r.status, txt)
                return 200 <= r.status < 300
    except Exception as exc:
        logging.warning("‚ö†Ô∏è ChatAPI v2 send exception: %s", exc)
        return False