# amo_client.py ‚Äî –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç amoCRM (HTTP –∏ Chat API)
# –ù–æ–≤—ã–µ/–∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–º–µ—á–µ–Ω—ã # üî¥. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ.

from __future__ import annotations  # —Ç–∏–ø—ã –∏–∑ –±—É–¥—É—â–µ–≥–æ

import os  # –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—É—Ç–∏
import json  # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
import hmac  # –ø–æ–¥–ø–∏—Å—å Chat API
import hashlib  # MD5/HMAC
import logging  # –ª–æ–≥–∏
from pathlib import Path  # –ø—É—Ç—å –∫ .env
from typing import Optional  # —Ç–∏–ø—ã
import aiohttp  # HTTP-–∫–ª–∏–µ–Ω—Ç
import uuid
import time



from dotenv import load_dotenv  # .env –∑–∞–≥—Ä—É–∑—á–∏–∫

from constants import AMO_REQUEST_TIMEOUT_SEC  # —Ç–∞–π–º–∞—É—Ç—ã HTTP


# ======================
#    –û–∫—Ä—É–∂–µ–Ω–∏–µ/–ø—É—Ç–∏
# ======================

ENV_PATH = "/var/www/medbot/.env"  # –ø—É—Ç—å –¥–æ .env –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if os.path.exists(ENV_PATH):  # –≥—Ä—É–∑–∏–º .env –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    load_dotenv(ENV_PATH)

AMO_API_URL = os.getenv("AMO_API_URL", "")  # –±–∞–∑–æ–≤—ã–π URL API
AMO_CLIENT_ID = os.getenv("AMO_CLIENT_ID", "")  # OAuth client_id
AMO_CLIENT_SECRET = os.getenv("AMO_CLIENT_SECRET", "")  # client_secret
AMO_REDIRECT_URI = os.getenv("AMO_REDIRECT_URI", "")  # redirect_uri
AMO_REFRESH_TOKEN = os.getenv("AMO_REFRESH_TOKEN", "")  # refresh
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")  # access
AMO_PIPELINE_ID = os.getenv("AMO_PIPELINE_ID", "0")  # ID –≤–æ—Ä–æ–Ω–∫–∏

# ======================
#     Token refresh
# ======================

async def refresh_access_token() -> str:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç access_token –ø–æ refresh_token –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç .env."""
    url = f"{AMO_API_URL}/oauth2/access_token"  # —Ç–æ—á–∫–∞ OAuth
    payload = {  # —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        "client_id": AMO_CLIENT_ID,
        "client_secret": AMO_CLIENT_SECRET,
        "grant_type": "refresh_token",
        "refresh_token": os.getenv("AMO_REFRESH_TOKEN", AMO_REFRESH_TOKEN),
        "redirect_uri": AMO_REDIRECT_URI,
    }
    async with aiohttp.ClientSession() as s:  # HTTP-—Å–µ—Å—Å–∏—è
        async with s.post(  # POST –Ω–∞ OAuth endpoint
            url, json=payload, timeout=AMO_REQUEST_TIMEOUT_SEC
        ) as r:
            text = await r.text()  # —Å–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
            if r.status != 200:  # –Ω–µ—É—Å–ø–µ—Ö ‚Üí –±—Ä–æ—Å–∞–µ–º
                raise RuntimeError(
                    f"Token refresh failed [{r.status}]: {text}"
                )
            data = await r.json()  # JSON-–æ—Ç–≤–µ—Ç
            new_access = data["access_token"]  # –Ω–æ–≤—ã–π access
            new_refresh = data.get(  # –Ω–æ–≤—ã–π refresh (–µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª)
                "refresh_token",
                os.getenv("AMO_REFRESH_TOKEN", AMO_REFRESH_TOKEN),
            )

    # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º .env –∞—Ç–æ–º–∞—Ä–Ω–æ (–±–µ–∑–æ–ø–∞—Å–Ω–µ–µ, —á–µ–º sed)
    env_path = Path(ENV_PATH)
    lines = env_path.read_text(encoding="utf-8").splitlines(True)
    out = []
    for line in lines:
        if line.startswith("AMO_ACCESS_TOKEN="):
            out.append(f"AMO_ACCESS_TOKEN={new_access}\n")
        elif line.startswith("AMO_REFRESH_TOKEN="):
            out.append(f"AMO_REFRESH_TOKEN={new_refresh}\n")
        else:
            out.append(line)
    env_path.write_text("".join(out), encoding="utf-8")

    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
    os.environ["AMO_ACCESS_TOKEN"] = new_access
    os.environ["AMO_REFRESH_TOKEN"] = new_refresh

    logging.info("‚úÖ amoCRM token refreshed successfully")  # –ª–æ–≥ —É—Å–ø–µ—Ö–∞
    return new_access  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π access

# ======================
#    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# ======================

def _auth_header() -> dict[str, str]:
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization –¥–ª—è amoCRM."""
    token = os.getenv("AMO_ACCESS_TOKEN", AMO_ACCESS_TOKEN)
    return {"Authorization": f"Bearer {token}"}

# ======================
#  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞/—Å–¥–µ–ª–∫–∏
# ======================

async def _create_contact(name: str) -> Optional[int]:
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç contact_id."""
    url = f"{AMO_API_URL}/api/v4/contacts"
    payload = [{"name": name or "Telegram user"}]
    async with aiohttp.ClientSession() as s:
        async with s.post(
            url, headers=_auth_header(), json=payload
        ) as r:
            txt = await r.text()
            logging.info("üì° Contact resp [%s]: %s", r.status, txt)
            if r.status == 401:  # —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö ‚Äî –æ–±–Ω–æ–≤–∏–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º
                await refresh_access_token()
                return await _create_contact(name)
            if r.status != 200:
                return None
            data = await r.json()
    emb = data.get("_embedded", {}) if isinstance(data, dict) else {}
    arr = emb.get("contacts", [])
    return (arr[0] or {}).get("id") if arr else None


async def create_lead_in_amo(
    chat_id: int,
    username: str,
) -> Optional[int]:
    """–°–æ–∑–¥–∞—ë—Ç –∫–æ–Ω—Ç–∞–∫—Ç –∏ —Å–¥–µ–ª–∫—É –≤ –Ω—É–∂–Ω–æ–π –≤–æ—Ä–æ–Ω–∫–µ, —Å–≤—è–∑—ã–≤–∞–µ—Ç –∏—Ö,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç lead_id.
    """
    contact_id = await _create_contact(username)  # —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç
    if not contact_id:
        return None

    # üî¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º id –≤–æ—Ä–æ–Ω–∫–∏ –∏–∑ .env (–∂—ë—Å—Ç–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞)
    try:
        pipeline_id = int(AMO_PIPELINE_ID)
    except Exception:
        pipeline_id = 0

    url = f"{AMO_API_URL}/api/v4/leads"  # endpoint —Å–¥–µ–ª–æ–∫

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º payload: –∏–º—è + –Ω—É–∂–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞ + –ø—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    payload = [{
        "name": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({username})",
        "pipeline_id": pipeline_id or None,
        "_embedded": {"contacts": [{"id": contact_id}]},
    }]

    async with aiohttp.ClientSession() as s:
        async with s.post(url, headers=_auth_header(), json=payload) as r:
            txt = await r.text()
            logging.info("üì° Lead resp [%s]: %s", r.status, txt)
            if r.status == 401:  # —Ç–æ–∫–µ–Ω –ø—Ä–æ—Ç—É—Ö ‚Äî –æ–±–Ω–æ–≤–∏–º –∏ –ø–æ–≤—Ç–æ—Ä–∏–º
                await refresh_access_token()
                return await create_lead_in_amo(chat_id, username)
            if r.status != 200:
                return None
            data = await r.json()

    emb = data.get("_embedded", {}) if isinstance(data, dict) else {}
    arr = emb.get("leads", [])
    lead_id = (arr[0] or {}).get("id") if arr else None

    if lead_id:
        logging.info("‚úÖ lead %s created for chat_id=%s", lead_id, chat_id)

        # üî¥ –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ª–∏–¥ –≤ –≤–æ—Ä–æ–Ω–∫—É "–ü–ª–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª (–ò–ò-–≤—Ä–∞—á)"
        target_pipeline_id = int(os.getenv("AMO_PIPELINE_AI_ID", "10176698"))
        moved = await move_lead_to_pipeline(lead_id, target_pipeline_id)
        if moved:
            logging.info("‚úÖ lead %s moved to pipeline %s",
                         lead_id, target_pipeline_id)
        else:
            logging.warning("‚ö†Ô∏è failed to move lead %s to pipeline %s",
                            lead_id, target_pipeline_id)

    return lead_id


# üîΩ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ create_lead_in_amo

async def move_lead_to_pipeline(lead_id: int, pipeline_id: int) -> bool:
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å–¥–µ–ª–∫—É –≤ –Ω—É–∂–Ω—É—é –≤–æ—Ä–æ–Ω–∫—É."""
    url = f"{AMO_API_URL}/api/v4/leads/{lead_id}"
    payload = {"pipeline_id": pipeline_id}

    async with aiohttp.ClientSession() as s:
        async with s.patch(url, headers=_auth_header(), json=payload) as r:
            txt = await r.text()
            logging.info("üì¶ Move lead resp [%s]: %s", r.status, txt)
            return 200 <= r.status < 300


# ======================
#     –ó–∞–º–µ—Ç–∫–∏: —Ñ–∞–π–ª
# ======================

async def add_file_note(lead_id: str, uuid: str,
                        file_name: str = "") -> bool:
    """–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç —Ñ–∞–π–ª (uuid) –∫ —Å–¥–µ–ª–∫–µ –∫–∞–∫ –∑–∞–º–µ—Ç–∫—É-attachment."""
    url = f"{AMO_API_URL}/api/v4/leads/notes"
    payload = [{
        "entity_id": int(lead_id),
        "note_type": "attachment",
        "params": {"attachments": [{
            "file_name": file_name or "file.bin",
            "uuid": uuid,
        }]},
    }]
    async with aiohttp.ClientSession() as s:
        async with s.post(
            url, headers=_auth_header(), json=payload
        ) as r:
            txt = await r.text()
            ok = 200 <= r.status < 300
            logging.info("üìé add_file_note resp [%s]: %s", r.status, txt)
            if r.status == 401:
                await refresh_access_token()
                return await add_file_note(lead_id, uuid, file_name)
            return ok

# ======================
#     Chat API (amojo)
# ======================

def _rfc1123_now_gmt() -> str:
    """–î–∞—Ç–∞ –≤ RFC1123/GMT –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ Date."""
    from email.utils import formatdate
    return formatdate(usegmt=True)

def _md5_hex_lower(data: bytes) -> str:
    """MD5 –æ—Ç –±–∞–π—Ç–æ–≤ –≤ hex –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º."""
    return hashlib.md5(data).hexdigest().lower()

def _hmac_sha1_hex_ascii(src: str, secret_ascii: str) -> str:
    """HMAC-SHA1(src) –∫–ª—é—á–æ–º-—Å—Ç—Ä–æ–∫–æ–π, hex lower."""
    mac = hmac.new(secret_ascii.encode("utf-8"),
                   src.encode("utf-8"),
                   hashlib.sha1)
    return mac.hexdigest().lower()

async def send_chat_message_v2(  # üî¥
    scope_id: str,
    chat_id: int,
    text: str,
    username: Optional[str] = None,
) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ new_message –≤ amojo (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ v2)."""
    secret = os.getenv("AMO_CHAT_SECRET", "")
    if not secret or not scope_id:
        logging.warning("‚ö†Ô∏è Chat v2: missing secret or scope_id")
        return False

    # üî¥ –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω—ã–π msgid –∏ –º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ç—Ä–µ–±—É—é—Ç—Å—è –≤ v2)
    import uuid  # üî¥
    import time  # üî¥
    msgid = uuid.uuid4().hex  # üî¥
    ts = int(time.time())  # üî¥

    # üî¥ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω–æ PHP-–ø—Ä–∏–º–µ—Ä—É amoCRM: event_type + payload
    body = {  # üî¥
        "event_type": "new_message",  # üî¥
        "payload": {  # üî¥
            "timestamp": ts,  # üî¥
            "conversation_id": f"tg_{chat_id}",  # üî¥
            "silent": False,  # üî¥
            "msgid": msgid,  # üî¥
            "sender": {  # üî¥
                "id": str(chat_id),  # üî¥
                "name": username or f"User {chat_id}",  # üî¥
            },  # üî¥
            "message": {  # üî¥
                "type": "text",  # üî¥
                "text": (text or "")[:4000],  # üî¥
            },  # üî¥
        },  # üî¥
    }  # üî¥

    body_bytes = json.dumps(
        body, ensure_ascii=False, separators=(",", ":")
    ).encode("utf-8")
    content_md5 = _md5_hex_lower(body_bytes)
    content_type = "application/json"
    date_gmt = _rfc1123_now_gmt()

    # üî¥ –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–±–µ–∑ /chats, –±–µ–∑ /chats/link)
    path = f"/v2/origin/custom/{scope_id}"  # üî¥
    sign_src = "\n".join([
        "POST", content_md5, content_type, date_gmt, path
    ])
    signature = _hmac_sha1_hex_ascii(sign_src, secret)

    url = f"https://amojo.amocrm.ru{path}"
    try:
        logging.info("üí¨ ChatAPI v2 payload(top): %s", body)
        async with aiohttp.ClientSession() as s:
            async with s.post(
                url,
                data=body_bytes,
                headers={
                    "Date": date_gmt,
                    "Content-Type": content_type,
                    "Content-MD5": content_md5,
                    "X-Signature": signature,
                },
                timeout=AMO_REQUEST_TIMEOUT_SEC,
            ) as r:
                txt = await r.text()
                logging.info("üí¨ ChatAPI v2 send [%s]: %s", r.status, txt)
                return 200 <= r.status < 300
    except Exception as exc:
        logging.warning("‚ö†Ô∏è ChatAPI v2 send exception: %s", exc)
        return False
