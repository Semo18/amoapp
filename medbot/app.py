# app.py
import os  # —Ä–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env
import logging  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
from typing import Optional, Dict, Any  # –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

# –∫–∞—Ä–∫–∞—Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Ç–∏–ª–∏—Ç—ã
from fastapi import FastAPI, Request, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware  # CORS-–¥–æ—Å—Ç—É–ø

# Telegram SDK (aiogram)
from aiogram import Bot, Dispatcher
from aiogram.types import Update

# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
from dotenv import load_dotenv

# üî¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ amoCRM
import aiohttp

# üî¥ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from bot import setup_handlers  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
from admin_api import router as admin_router  # REST –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
from repo import fetch_messages  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î

# ======================
#     –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´
# ======================

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

# üî¥ –±–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)

# --- —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")  # —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")  # –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ amoCRM ---
AMO_WEBHOOK_URL = os.getenv("AMO_WEBHOOK_URL", "")  # üî¥ –∞–¥—Ä–µ—Å amoCRM webhook
AMO_API_URL = os.getenv("AMO_API_URL", "")  # üî¥ REST API amoCRM
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")  # üî¥ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ API
AMO_ENABLED = bool(AMO_WEBHOOK_URL or AMO_API_URL)  # –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è

# --- —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã Telegram SDK ---
bot = Bot(BOT_TOKEN)  # –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç Telegram-–±–æ—Ç–∞
dp = Dispatcher()  # –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä aiogram
app = FastAPI(title="medbot")  # –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI

# ======================
#     –ù–ê–°–¢–†–û–ô–ö–ê CORS
# ======================

# –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://amo.ap-development.com",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,  # —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    allow_credentials=True,  # —Ä–∞–∑—Ä–µ—à–∏—Ç—å cookie
    allow_methods=["*"],  # –≤—Å–µ HTTP-–º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# ==========================================================
#       –ì–õ–ê–í–ù–´–ô TELEGRAM WEBHOOK (–æ–¥–∏–Ω —Ç–æ–∫–µ–Ω ‚Äî –¥–≤–∞ –ø–æ—Ç–æ–∫–∞)
# ==========================================================

@app.post("/medbot/webhook")
async def telegram_webhook(request: Request) -> Dict[str, Any]:
    """
    –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∏—ë–º–∞ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–π.
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ aiogram (–±–æ—Ç + OpenAI).
    2. –î—É–±–ª–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ amoCRM ‚Äî webhook –∏/–∏–ª–∏ REST API.
    3. –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –≤ amoCRM.
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.headers.get("x-telegram-bot-api-secret-token") != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad secret")

    # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (Telegram update)
    data = await request.json()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç Update –¥–ª—è aiogram
    update = Update.model_validate(data)

    # –ü–µ—Ä–µ–¥–∞—ë–º –∞–ø–¥–µ–π—Ç aiogram ‚Üí —á—Ç–æ–±—ã –±–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    await dp.feed_update(bot, update)

    # ======================================
    # (1) –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–ø–¥–µ–π—Ç –≤ amoCRM webhook
    # ======================================
    if AMO_WEBHOOK_URL:
        try:
            async with aiohttp.ClientSession() as session:
                await session.post(AMO_WEBHOOK_URL, json=data, timeout=5)
                logging.info("üì® Telegram update forwarded to amoCRM webhook")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to forward Telegram update: {e}")

    # ======================================
    # (2) –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É + –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª
    # ======================================
    if AMO_API_URL and AMO_ACCESS_TOKEN:
        try:
            msg = data.get("message") or {}  # –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë–º –æ–±—ä–µ–∫—Ç
            text = msg.get("text", "")  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            username = msg.get("from", {}).get("username", "unknown")
            message = f"{username}: {text}" if text else username

            # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ ---
            file_uuid: Optional[str] = None

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç
            if "document" in msg:
                file_id = msg["document"]["file_id"]
                file_name = msg["document"].get("file_name", "file.bin")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
                file_info = await bot.get_file(file_id)
                file_bytes = await bot.download_file(file_info.file_path)

                # üî¥ upload_file_to_amo ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ –∫–æ–¥–µ
                file_uuid = await upload_file_to_amo(file_name, file_bytes.read())

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ (–±–µ—Ä—ë–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ)
            elif "photo" in msg:
                photo = msg["photo"][-1]
                file_id = photo["file_id"]
                file_name = "photo.jpg"

                file_info = await bot.get_file(file_id)
                file_bytes = await bot.download_file(file_info.file_path)
                file_uuid = await upload_file_to_amo(file_name, file_bytes.read())

            # --- —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É –≤ amoCRM ---
            lead_payload = {
                "name": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({username})",
                "pipeline_id": int(os.getenv("AMO_PIPELINE_ID", "0")),
                "_embedded": {"contacts": [{"name": username}]},
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{AMO_API_URL}/api/v4/leads",
                    headers={"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"},
                    json=[lead_payload],
                ) as resp:
                    if resp.status == 200:
                        res = await resp.json()
                        lead_id = res[0]["id"]

                        # --- —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (note) ---
                        note_payload = {
                            "note_type": "common",
                            "params": {"text": message},
                        }

                        # üî¥ –µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ note
                        if file_uuid:
                            note_payload["_embedded"] = {
                                "files": [{"uuid": file_uuid}]
                            }

                        await session.post(
                            f"{AMO_API_URL}/api/v4/leads/{lead_id}/notes",
                            headers={"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"},
                            json=[note_payload],
                        )

                        logging.info(f"‚úÖ Created lead {lead_id} with note & file")
                    else:
                        err = await resp.text()
                        logging.warning(
                            f"‚ùå Lead creation failed [{resp.status}]: {err}"
                        )

        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to create lead in amoCRM: {e}")

    # Telegram –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏—ë–º–µ –∑–∞–ø—Ä–æ—Å–∞
    return {"ok": True}


# ======================
#     HEALTHCHECK API
# ======================

@app.get("/medbot/health")
async def health() -> Dict[str, str]:
    """–°–ª—É–∂–µ–±–Ω–∞—è —Ä—É—á–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    return {"status": "ok"}

# =====================================================
#   –ü–†–ò–Å–ú –°–û–ë–´–¢–ò–ô –û–¢ AMOCRM (—Å–¥–µ–ª–∫–∏, —Å—Ç–∞—Ç—É—Å—ã, –∫–ª–∏–µ–Ω—Ç—ã)
# =====================================================

@app.post("/medbot/amo-webhook")
async def amo_webhook(request: Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç amoCRM (—Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∏ —Ç.–¥.).
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤—Ä–∞—á–µ–π, –≤—ã–∑—ã–≤–∞—Ç—å OpenAI.
    """
    data = await request.json()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç amoCRM: {data}")
    return {"ok": True}

# =====================================================
#        ADMIN API, TELEGRAM –•–≠–ù–î–õ–ï–†–´, WEBHOOK SETUP
# =====================================================

# üîπ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Telegram-—Ö—ç–Ω–¥–ª–µ—Ä—ã
setup_handlers(dp)

# üîπ –ü–æ–¥–∫–ª—é—á–∞–µ–º REST API –∞–¥–º–∏–Ω–∫–∏
app.include_router(admin_router)

@app.get("/admin/set_webhook")
async def set_webhook() -> Dict[str, Any]:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram webhook –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä.
    –ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è.
    """
    if not BASE_URL:
        raise HTTPException(500, "BASE_URL not set")

    await bot.set_webhook(
        url=f"{BASE_URL}/medbot/webhook",
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
    )
    return {"ok": True, "url": f"{BASE_URL}/medbot/webhook"}

# =====================================================
#   –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò (–ü–ê–ì–ò–ù–ê–¶–ò–Ø, –ü–û–ò–°–ö)
# =====================================================

@app.get("/admin-api/messages")
async def api_messages(
    chat_id: int = Query(..., description="ID —á–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)"),
    limit: int = Query(20, ge=1, le=200),
    before_id: Optional[int] = Query(None),
    after_id: Optional[int] = Query(None),
    q: Optional[str] = Query(None, min_length=1),
    direction: Optional[int] = Query(None, ge=0, le=1),
    content_type: Optional[str] = Query(None),
    order: str = Query("desc", regex="^(asc|desc)$"),
) -> Dict[str, Any]:
    """API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –≤—ã–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏."""
    try:
        data = fetch_messages(
            chat_id=chat_id,
            limit=limit,
            before_id=before_id,
            after_id=after_id,
            q=q,
            direction=direction,
            content_type=content_type,
            order=order,
        )
        return data
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))
# Tes2222