# app.py
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (medbot)
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Telegram webhooks, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å amoCRM –∏ OpenAI.

import os  # —Ä–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env
import logging  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
from typing import Optional, Dict, Any  # –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

# –∫–∞—Ä–∫–∞—Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Ç–∏–ª–∏—Ç—ã
from fastapi import FastAPI, Request, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware  # CORS-–¥–æ—Å—Ç—É–ø
from amo_client import refresh_access_token  # üîÅ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
from storage import get_lead_id as redis_get_lead_id, set_lead_id as redis_set_lead_id  # üî¥
from amo_client import create_lead_in_amo  # üî¥
# (–Ω–∏–∂–µ –µ—â—ë –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º add_text_note / add_file_note –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥–æ–±–∞–≤–∏–º –∏—Ö –≤ amo_client)

# Telegram SDK (aiogram)
from aiogram import Bot, Dispatcher
from aiogram.types import Update

# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv

# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ amoCRM
import aiohttp

# –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
from openai import OpenAI

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from bot import setup_handlers  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
from admin_api import router as admin_router  # REST –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
from repo import fetch_messages  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
from repo import upload_file_to_amo  # üî¥ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ amoCRM
from constants import (  # üî¥ –æ–±—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    ALLOWED_ORIGINS,
    TELEGRAM_FORWARD_TIMEOUT_SEC,
    AMO_TOKEN_REFRESH_INTERVAL_SEC,
    AMO_TOKEN_REFRESH_RETRY_SEC,
)
# ======================
#     –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´
# ======================

load_dotenv()  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env

logging.basicConfig(  # –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)

# --- —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")  # —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")  # –±–∞–∑–æ–≤—ã–π URL

# --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OpenAI ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

# –∂—ë—Å—Ç–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set")
if not ASSISTANT_ID:
    raise RuntimeError("ASSISTANT_ID is not set")

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ amoCRM ---
AMO_WEBHOOK_URL = os.getenv("AMO_WEBHOOK_URL", "")
AMO_API_URL = os.getenv("AMO_API_URL", "")
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")
AMO_ENABLED = bool(AMO_WEBHOOK_URL or AMO_API_URL)

# --- —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã Telegram SDK ---
bot = Bot(BOT_TOKEN)  # –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–±–æ—Ç
dp = Dispatcher()  # –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä aiogram
app = FastAPI(title="medbot")  # –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI


# üî¥ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª—è—Ç–æ—Ä amoCRM —Ç–æ–∫–µ–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
@app.on_event("startup")
async def periodic_token_refresh() -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç amoCRM —Ç–æ–∫–µ–Ω –∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤,
    —Å –ø–æ–≤—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–±–æ–π —Å–µ—Ç–∏ –∏–ª–∏ 401).
    """
    import asyncio
    import logging

    async def refresher():
        while True:
            try:
                logging.info("‚ôªÔ∏è Scheduled amoCRM token refresh...")
                await refresh_access_token()  # üî¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
                logging.info("‚úÖ amoCRM token refreshed successfully (scheduled)")
                await asyncio.sleep(AMO_TOKEN_REFRESH_INTERVAL_SEC)  # üî¥ —Å–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            except Exception as exc:
                logging.warning(f"‚ö†Ô∏è Failed scheduled token refresh: {exc}")
                logging.info("üîÅ Retrying amoCRM token refresh in 5 minutes...")
                await asyncio.sleep(AMO_TOKEN_REFRESH_RETRY_SEC)  # üî¥ –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª

    asyncio.create_task(refresher())  # üî¥ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –≤ —Ñ–æ–Ω–µ



# ======================
#     –ù–ê–°–¢–†–û–ô–ö–ê CORS
# ======================

# —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã)
# CORS –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±–µ—Ä—ë–º –∏–∑ –æ–±—â–µ–≥–æ –º–æ–¥—É–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç # üî¥

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,  # —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    allow_credentials=True,
    allow_methods=["*"],  # —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP-–º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# ====================================================
#     –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ù–û–°–¢–ò –° OpenAI API
# ====================================================

@app.get("/medbot/openai-selftest")
async def openai_selftest() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å OpenAI:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏.
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
    """
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        mdl = client.models.retrieve("gpt-4o-mini")  # —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏
        ast = client.beta.assistants.retrieve(ASSISTANT_ID)  # —Ç–µ—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        return {
            "ok": True,
            "model": mdl.id,
            "assistant_id": ast.id,
            "assistant_name": getattr(ast, "name", None),
        }
    except Exception as exc:
        logging.exception("OpenAI selftest failed")
        raise HTTPException(status_code=500, detail=str(exc))

# ==========================================================
#       –ì–õ–ê–í–ù–´–ô TELEGRAM WEBHOOK
# ==========================================================

@app.post("/medbot/webhook")
async def telegram_webhook(request: Request) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∏—ë–º–∞ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–π.
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ aiogram.
    2. –î—É–±–ª–∏—Ä—É–µ–º –∞–ø–¥–µ–π—Ç –≤ amoCRM.
    3. –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É –∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ–±—Ö—É–∫–∞ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á—É–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã) # üî¥
    secret = request.headers.get(
        "x-telegram-bot-api-secret-token"
    )  # üî¥
    if secret != WEBHOOK_SECRET:  # üî¥
        raise HTTPException(status_code=403, detail="bad secret")

    # —á–∏—Ç–∞–µ–º JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (Telegram update)
    data = await request.json()

    # –ø–∞—Ä—Å–∏–º –≤ –æ–±—ä–µ–∫—Ç Update –¥–ª—è aiogram
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)  # –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É aiogram

    # (1) –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ø–¥–µ–π—Ç–∞ –≤ amoCRM webhook
    if AMO_WEBHOOK_URL:
        try:
            async with aiohttp.ClientSession() as session:
                await session.post(
                    AMO_WEBHOOK_URL, 
                    json=data, 
                    timeout=TELEGRAM_FORWARD_TIMEOUT_SEC
                )  # üî¥ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ç–∞–π–º–∞—É—Ç–∞
                logging.info("üì® Telegram update forwarded to amoCRM webhook")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to forward Telegram update: {e}")

    # app.py ‚Äî –∑–∞–º–µ–Ω–∞ –±–ª–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏

    # ...
    # (2) –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ / –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    if AMO_API_URL and AMO_ACCESS_TOKEN:
        try:
            msg = data.get("message") or {}
            chat_id = msg.get("chat", {}).get("id")
            text = msg.get("text", "")
            username = msg.get("from", {}).get("username", "unknown")

            if not chat_id:  # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –æ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
                return {"ok": True}

            # 1) –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É
            lead_id = redis_get_lead_id(chat_id)

            # 2) –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            if not lead_id:
                lead_id = await create_lead_in_amo(chat_id=chat_id, username=username)
                if lead_id:
                    redis_set_lead_id(chat_id, str(lead_id))

            if not lead_id:
                logging.warning("‚ö†Ô∏è Lead is not created ‚Äî skip notes")
                return {"ok": True}

            # 3) –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –∫–∞–∫ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
            # 3) –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ chat message –≤ amoCRM
            if text:
                from amo_client import send_chat_message_to_amo
                await send_chat_message_to_amo(chat_id, text, username)

            # 4) –í–ª–æ–∂–µ–Ω–∏—è: –∑–∞–≥—Ä—É–∑–∏–º —Ñ–∞–π–ª –≤ amo + –ø—Ä–∏–∫—Ä–µ–ø–∏–º –∫ —Å–¥–µ–ª–∫–µ
            if "document" in msg or "photo" in msg:
                file_name = None
                file_id = None
                if "document" in msg:
                    file_id = msg["document"]["file_id"]
                    file_name = msg["document"].get("file_name", "file.bin")
                elif "photo" in msg:
                    file_id = msg["photo"][-1]["file_id"]
                    file_name = "photo.jpg"

                if file_id:
                    file_info = await bot.get_file(file_id)
                    file_bytes = await bot.download_file(file_info.file_path)
                    uuid = await upload_file_to_amo(file_name, file_bytes.read())  # üî¥
                    if uuid:
                        from amo_client import add_file_note  # üî¥ –∏–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
                        await add_file_note(lead_id=str(lead_id), uuid=uuid, file_name=file_name)

        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to process amoCRM linkage: {e}")

    return {"ok": True}  # Telegram –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

# ======================
#     HEALTHCHECK API
# ======================

@app.get("/medbot/health")
async def health() -> Dict[str, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    return {"status": "ok"}

# =====================================================
#   –í–•–û–î–Ø–©–ò–ï –°–û–ë–´–¢–ò–Ø –û–¢ AMOCRM
# =====================================================


@app.post("/medbot/amo-webhook")
async def amo_webhook(request: Request):
    """
    –ü—Ä–∏—ë–º —Å–æ–±—ã—Ç–∏–π amoCRM (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–¥–µ–ª–∫–∏).
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ is_incoming=False (–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞) ‚Äî
    –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –µ–≥–æ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç.
    """
    data = await request.json()
    logging.info(f"üì© –í–µ–±—Ö—É–∫ amoCRM: {data}")

    try:
        events = data.get("_embedded", {}).get("events", [])
        for ev in events:
            if ev.get("type") != "chats_message":  # –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ —á–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏—è
                continue
            msg = ev.get("payload", {}).get("message", {})
            chat_id_str = ev.get("payload", {}).get("chat_id", "")
            if not chat_id_str.startswith("telegram-"):
                continue
            chat_id = int(chat_id_str.replace("telegram-", ""))
            text = msg.get("text", "")
            is_incoming = msg.get("is_incoming", True)

            # –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ ‚Üí –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if not is_incoming and text:
                await bot.send_message(chat_id, text)
                logging.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ amoCRM: {text}")

    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ amoCRM webhook: {e}")

    return {"ok": True}


# =====================================================
#   ADMIN API, TELEGRAM –•–≠–ù–î–õ–ï–†–´, WEBHOOK SETUP
# =====================================================

setup_handlers(dp)  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
app.include_router(admin_router)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ REST –∞–¥–º–∏–Ω–∫–∏

@app.get("/admin/set_webhook")
async def set_webhook() -> Dict[str, Any]:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram webhook (–≤—ã–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)."""
    if not BASE_URL:
        raise HTTPException(500, "BASE_URL not set")

    await bot.set_webhook(
        url=f"{BASE_URL}/medbot/webhook",
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
    )
    return {"ok": True, "url": f"{BASE_URL}/medbot/webhook"}

# =====================================================
#   API –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã)
# =====================================================

@app.get("/admin-api/messages")
async def api_messages(
    chat_id: int = Query(..., description="ID —á–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)"),
    limit: int = Query(20, ge=1, le=200),
    before_id: Optional[int] = Query(None),
    after_id: Optional[int] = Query(None),
    q: Optional[str] = Query(None, min_length=1),
    direction: Optional[int] = Query(None, ge=0, le=1),
    content_type: Optional[str] = Query(None),
    order: str = Query("desc", regex="^(asc|desc)$"),
) -> Dict[str, Any]:
    """API –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –≤—ã–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        data = fetch_messages(
            chat_id=chat_id,
            limit=limit,
            before_id=before_id,
            after_id=after_id,
            q=q,
            direction=direction,
            content_type=content_type,
            order=order,
        )
        return data
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))
