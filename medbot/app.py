# app.py ‚Äî FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞: Telegram ‚Üî amoCRM ‚Üî OpenAI
# –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–Ω–∞–±–∂–µ–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º; –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∫–∏ ‚Äî # üî¥

import os  # –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
import logging  # –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from typing import Optional, Union, Dict, Any  # —Ç–∏–ø–∏–∑–∞—Ü–∏—è

from fastapi import FastAPI, Request, HTTPException, Query  # –≤–µ–±-—è–¥—Ä–æ
from fastapi.middleware.cors import CORSMiddleware  # CORS-–ø–æ–ª–∏—Ç–∏–∫–∞

from dotenv import load_dotenv  # –∑–∞–≥—Ä—É–∑–∫–∞ .env

from aiogram import Bot, Dispatcher  # Telegram SDK
from aiogram.types import Update  # –º–æ–¥–µ–ª—å –∞–ø–¥–µ–π—Ç–∞

from openai import OpenAI  # —Å–∞–º–æ—Ç–µ—Å—Ç OpenAI

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞)
from bot import setup_handlers  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
from admin_api import router as admin_router  # –º–∞—Ä—à—Ä—É—Ç—ã –∞–¥–º–∏–Ω–∫–∏
from repo import fetch_messages, upload_file_to_amo  # –ë–î –∏ —Ñ–∞–π–ª—ã –≤ amo
from constants import (  # –æ–±—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞
    ALLOWED_ORIGINS,
    TELEGRAM_FORWARD_TIMEOUT_SEC,
    AMO_TOKEN_REFRESH_INTERVAL_SEC,
    AMO_TOKEN_REFRESH_RETRY_SEC,
)

# üî¥ ‚Äî —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å amoCRM –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ
from amo_client import (  # üî¥
    refresh_access_token,        # üîÅ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ amoCRM
    create_lead_in_amo,          # —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞+—Å–¥–µ–ª–∫–∏
    add_file_note,               # –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫ —Å–¥–µ–ª–∫–µ
    send_chat_message_v2,        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Chat API (amojo)
)

# ======================
#      –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
# ======================

load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ–º .env –¥–æ —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

logging.basicConfig(  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # —Ç–æ–∫–µ–Ω Telegram
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")  # —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")  # –±–∞–∑–æ–≤—ã–π URL

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –∫–ª—é—á OpenAI
ASSISTANT_ID = os.getenv("ASSISTANT_ID")  # ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ OpenAI

if not BOT_TOKEN:  # –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set")
if not ASSISTANT_ID:
    raise RuntimeError("ASSISTANT_ID is not set")

AMO_WEBHOOK_URL = os.getenv("AMO_WEBHOOK_URL", "")  # URL –≤–µ–±—Ö—É–∫–∞ –≤ amo
AMO_API_URL = os.getenv("AMO_API_URL", "")  # –±–∞–∑–æ–≤—ã–π API amo
AMO_ENABLED = bool(AMO_WEBHOOK_URL or AMO_API_URL)  # —Ñ–ª–∞–≥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

bot = Bot(BOT_TOKEN)  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
dp = Dispatcher()  # —Ä–æ—É—Ç–µ—Ä aiogram
app = FastAPI(title="medbot")  # –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI

# ======================
#  –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π refresh
# ======================

@app.on_event("startup")  # —Ö—É–∫ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def periodic_token_refresh() -> None:
    """–§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ amoCRM –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    import asyncio  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç ‚Äî –Ω–µ –∑–∞—Å–æ—Ä—è–µ–º –≥–ª–æ–±–∞–ª–∫—É

    async def refresher() -> None:
        while True:  # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
            try:
                logging.info("‚ôªÔ∏è Scheduled amoCRM token refresh...")
                await refresh_access_token()  # üîÅ –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞
                logging.info(
                    "‚úÖ amoCRM token refreshed successfully (scheduled)"
                )
                await asyncio.sleep(  # –ø–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–∫–Ω–∞
                    AMO_TOKEN_REFRESH_INTERVAL_SEC
                )
            except Exception as exc:  # —Å–µ—Ç–µ–≤—ã–µ/401 –∏ —Ç.–ø.
                logging.warning("‚ö†Ô∏è Refresh failed: %s", exc)
                logging.info("üîÅ Retry in %s sec",
                             AMO_TOKEN_REFRESH_RETRY_SEC)
                await asyncio.sleep(AMO_TOKEN_REFRESH_RETRY_SEC)

    asyncio.create_task(refresher())  # —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
    # üî¥

# ======================
#         CORS
# ======================

app.add_middleware(  # —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ======================
#  OpenAI self-test API
# ======================

@app.get("/medbot/openai-selftest")
async def openai_selftest() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)  # –∫–ª–∏–µ–Ω—Ç SDK
        mdl = client.models.retrieve("gpt-4o-mini")  # —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏
        ast = client.beta.assistants.retrieve(ASSISTANT_ID)  # –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç
        return {"ok": True, "model": mdl.id, "assistant_id": ast.id,
                "assistant_name": getattr(ast, "name", None)}
    except Exception as exc:
        logging.exception("OpenAI selftest failed")  # —Å—Ç–µ–∫ –≤ –ª–æ–≥–∏
        raise HTTPException(status_code=500, detail=str(exc))

# ======================
#      Telegram webhook
# ======================

from storage import (  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ app
    get_lead_id as redis_get_lead_id,  # –º–∞–ø–ø–∏–Ω–≥ chat_id ‚Üí lead_id
    set_lead_id as redis_set_lead_id,
)

@app.post("/medbot/webhook")
async def telegram_webhook(request: Request) -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Telegram-–∞–ø–¥–µ–π—Ç–æ–≤."""
    # –∑–∞—â–∏—Ç–Ω—ã–π —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–Ω—è—Ç—å —á—É–∂–æ–π –≤—ã–∑–æ–≤
    secret = request.headers.get("x-telegram-bot-api-secret-token")
    if secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad secret")

    data = await request.json()  # —á–∏—Ç–∞–µ–º update –∫–∞–∫ dict
    update = Update.model_validate(data)  # –≤–∞–ª–∏–¥–∞—Ü–∏—è aiogram-–º–æ–¥–µ–ª—å—é
    await dp.feed_update(bot, update)  # –æ—Ç–¥–∞—ë–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º aiogram

    # –∑–µ—Ä–∫–∞–ª–∏–º –∞–ø–¥–µ–π—Ç –≤ amoCRM –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ URL
    if AMO_WEBHOOK_URL:
        try:
            import aiohttp  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç ‚Äî —ç–∫–æ–Ω–æ–º–∏–º –∏–º–ø–æ—Ä—Ç—ã
            async with aiohttp.ClientSession() as s:  # —Å–µ—Å—Å–∏—è HTTP
                await s.post(  # –æ—Ç–ø—Ä–∞–≤–∫–∞ ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª, —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    AMO_WEBHOOK_URL,
                    json=data,
                    timeout=TELEGRAM_FORWARD_TIMEOUT_SEC,
                )
                logging.info("üì® Update forwarded to amoCRM webhook")
        except Exception as e:
            logging.warning("‚ö†Ô∏è Forward to amoCRM failed: %s", e)

        # –Ω–∏–∂–µ ‚Äî –ª–æ–≥–∏–∫–∞ —Å–¥–µ–ª–∫–∏/–∑–∞–º–µ—Ç–æ–∫/—á–∞—Ç–∞ amoCRM
    if AMO_API_URL and os.getenv("AMO_ACCESS_TOKEN"):  # –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ amo
        try:
            msg = data.get("message") or {}  # –±–ª–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id_opt = (msg.get("chat") or {}).get("id")  # int|None
            text = (msg.get("text") or "").strip()  # —Ç–µ–∫—Å—Ç –∞–ø–¥–µ–π—Ç–∞
            username = ((msg.get("from") or {}).get("username") or "unknown")

            if chat_id_opt is None:  # –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
                logging.info("‚ÑπÔ∏è no chat_id in update; skip amo flow")
                return {"ok": True}

            chat_id = int(chat_id_opt)

            # –§–ª–∞–≥: iMbox —Å–∞–º —Å–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫–∏ (—á–µ—Ä–µ–∑ MedBot Bridge)
            imbox_autocreate = os.getenv("AMO_IMBOX_AUTOCREATE", "1") == "1"

            # –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å —Å–≤—è–∑–∫—É chat_id ‚Üí lead_id –∏–∑ Redis
            lead_id: Optional[Union[str, int]] = redis_get_lead_id(chat_id)

            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–¥–µ–ª–∫—É
            if imbox_autocreate and not lead_id:
                lead_id = await get_latest_lead_for_chat(chat_id)
                if lead_id:
                    logging.info("‚ôªÔ∏è Existing lead %s found for chat %s",
                                lead_id, chat_id)
                    redis_set_lead_id(chat_id, str(lead_id))

                    # –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–¥–µ–ª–∫–∞ ‚Äú–¥–æ–∑—Ä–µ–µ—Ç‚Äù –≤ amo (5 —Å–µ–∫)
                    await asyncio.sleep(5)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–¥–µ–ª–∫–∞ –∏–º–µ–Ω–Ω–æ Telegram, –Ω–µ —Å—Ç–æ—Ä–æ–Ω–Ω—è—è
                    lead_name = await get_lead_name(lead_id)
                    if lead_name and (
                        "telegram" in lead_name.lower() or str(chat_id) in lead_name
                    ):
                        target_pipeline_id = int(
                            os.getenv("AMO_PIPELINE_AI_ID", "10176698")
                        )
                        await move_lead_to_pipeline(lead_id, target_pipeline_id)
                    else:
                        logging.info("üõë Lead %s not Telegram ‚Äî skip move", lead_id)

            # –ï—Å–ª–∏ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –ª–∏–¥ –≤—Ä—É—á–Ω—É—é
            elif not imbox_autocreate and not lead_id:
                lead_id = await create_lead_in_amo(
                    chat_id=chat_id,
                    username=username,
                )
                if lead_id:
                    redis_set_lead_id(chat_id, str(lead_id))
                    logging.info("‚úÖ lead %s created for chat %s",
                                lead_id, chat_id)
                else:
                    logging.warning("‚ö†Ô∏è lead not created for chat %s", chat_id)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ amojo Chat API (iMbox)
            if text:
                scope_id = os.getenv("AMO_CHAT_SCOPE_ID", "").strip()
                if not scope_id:
                    logging.warning("‚ö†Ô∏è AMO_CHAT_SCOPE_ID is empty")
                else:
                    ok = await send_chat_message_v2(
                        scope_id=scope_id,
                        chat_id=chat_id,
                        text=text,
                        username=username,
                    )
                    if not ok:
                        logging.warning("‚ö†Ô∏è ChatAPI send returned false")

            # –í–ª–æ–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–Ω–∞–µ–º lead_id
            if lead_id and ("document" in msg or "photo" in msg):
                file_id: Optional[str] = None
                file_name = ""

                if "document" in msg:
                    file_id = msg["document"]["file_id"]
                    file_name = msg["document"].get("file_name", "file.bin")
                elif "photo" in msg:
                    file_id = msg["photo"][-1]["file_id"]
                    file_name = "photo.jpg"

                if file_id:
                    try:
                        file_info = await bot.get_file(file_id)
                        file_bytes = await bot.download_file(file_info.file_path)
                        uuid = await upload_file_to_amo(file_name, file_bytes.read())
                        if uuid:
                            ok = await add_file_note(
                                lead_id=str(lead_id),
                                uuid=uuid,
                                file_name=file_name or "file.bin",
                            )
                            if not ok:
                                logging.warning("‚ö†Ô∏è add_file_note failed")
                        else:
                            logging.warning("‚ö†Ô∏è upload_file_to_amo empty")
                    except Exception as ex:
                        logging.warning("‚ö†Ô∏è file attach flow failed: %s", ex)

        except Exception as e:
            logging.warning("‚ö†Ô∏è amoCRM linkage failed: %s", e)

    return {"ok": True}


# ======================
#        Healthcheck
# ======================

@app.get("/medbot/health")
async def health() -> Dict[str, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–∏–≤–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    return {"status": "ok"}

# ======================
#   –í—Ö–æ–¥—è—â–∏–π Chat API
# ======================

import hashlib  # –ø–æ–¥–ø–∏—Å—å –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π amojo
import hmac  # HMAC-SHA1

def _hmac_sha1_hex(data: str, secret: str) -> str:
    """–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∫–∞–∫ hex(lower)."""
    mac = hmac.new(secret.encode("utf-8"),
                   data.encode("utf-8"),
                   digestmod="sha1")
    return mac.hexdigest().lower()

@app.post("/medbot/amo-webhook/{scope_id}")
async def amo_chat_webhook(scope_id: str, request: Request):
    """–ü—Ä–∏—ë–º —Å–æ–±—ã—Ç–∏–π Chat API (—Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏)."""
    secret = os.getenv("AMO_CHAT_SECRET", "")
    if not secret:
        raise HTTPException(status_code=500, detail="chat secret empty")

    date_hdr = request.headers.get("Date", "")
    ct_hdr = request.headers.get("Content-Type", "application/json")
    md5_hdr = (request.headers.get("Content-MD5", "") or "").lower()
    sig_hdr = (request.headers.get("X-Signature", "") or "").lower()

    body = await request.body()  # –±–∞–π—Ç—ã —Ç–µ–ª–∞ –¥–ª—è MD5

    real_md5 = hashlib.md5(body).hexdigest().lower()  # –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
    if md5_hdr and md5_hdr != real_md5:  # –≤–∞–ª–∏–¥–∞—Ü–∏—è MD5 –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª
        raise HTTPException(status_code=400, detail="Bad Content-MD5")

    path = f"/medbot/amo-webhook/{scope_id}"  # –ø—É—Ç—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏

    sign_str = "\n".join([  # —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –ø–æ —Å—Ö–µ–º–µ amojo
        request.method.upper(),
        md5_hdr,
        ct_hdr,
        date_hdr,
        path,
    ])
    expected = _hmac_sha1_hex(sign_str, secret)  # —Ä–∞—Å—á—ë—Ç –ø–æ–¥–ø–∏—Å–∏

    if sig_hdr and sig_hdr != expected:  # –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∏
        raise HTTPException(status_code=401, detail="Bad signature")

    try:
        payload = await request.json()  # –ø–∞—Ä—Å–∏–º JSON
    except Exception:
        raise HTTPException(status_code=400, detail="Invalid JSON")

    evt = payload.get("event_type")  # —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    if evt != "new_message":  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è
        return {"status": "ignored"}

    # v2-—Ñ–æ—Ä–º–∞—Ç: –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å + payload.message
    conv_id = (payload.get("conversation_id") or "").strip()  # üî¥
    if not conv_id.startswith("tg_"):  # –Ω–µ –Ω–∞—à —Ä–∞–∑–≥–æ–≤–æ—Ä
        return {"status": "ignored"}

    try:
        chat_id = int(conv_id.replace("tg_", "", 1))  # –∏–∑–≤–ª–µ–∫–∞–µ–º ID
    except ValueError:
        return {"status": "ignored"}  # —Å—Ç—Ä–∞–Ω–Ω—ã–π conv_id

    msg = (payload.get("payload") or {}).get("message") or {}  # —Ç–µ–∫—Å—Ç
    text = (msg.get("text") or "").strip()
    if not text:
        return {"status": "ok"}  # –ø—É—Å—Ç—ã–µ –Ω–µ —à–ª—ë–º

    try:
        await bot.send_message(chat_id, f"üí¨ –ú–µ–Ω–µ–¥–∂–µ—Ä: {text}")  # –æ—Ç–≤–µ—Ç
    except Exception:  # –Ω–µ —Ä–æ–Ω—è–µ–º –≤–µ–±—Ö—É–∫
        pass

    return {"status": "ok"}

# ======================
#     –ê–¥–º–∏–Ω-—Ö–µ–ª–ø–µ—Ä—ã
# ======================

app.include_router(admin_router)  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω-—Ä–æ—É—Ç—ã
setup_handlers(dp)  # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Telegram-—Ö—ç–Ω–¥–ª–µ—Ä—ã

@app.get("/admin/set_webhook")
async def set_webhook() -> Dict[str, Any]:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram-webhook –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è."""
    if not BASE_URL:
        raise HTTPException(500, "BASE_URL not set")

    await bot.set_webhook(  # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –±–æ—Ç–∞
        url=f"{BASE_URL}/medbot/webhook",
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
    )
    return {"ok": True, "url": f"{BASE_URL}/medbot/webhook"}

# ======================
#    API –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
# ======================

@app.get("/admin-api/messages")
async def api_messages(
    chat_id: int = Query(..., description="ID —á–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)"),
    limit: int = Query(20, ge=1, le=200),
    before_id: Optional[int] = Query(None),
    after_id: Optional[int] = Query(None),
    q: Optional[str] = Query(None, min_length=1),
    direction: Optional[int] = Query(None, ge=0, le=1),
    content_type: Optional[str] = Query(None),
    order: str = Query("desc", regex="^(asc|desc)$"),
) -> Dict[str, Any]:
    """–í—ã–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        data = fetch_messages(
            chat_id=chat_id,
            limit=limit,
            before_id=before_id,
            after_id=after_id,
            q=q,
            direction=direction,
            content_type=content_type,
            order=order,
        )
        return data
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))
