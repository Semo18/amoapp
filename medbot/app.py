# app.py
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (medbot)
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Telegram webhooks, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å amoCRM –∏ OpenAI.

import os  # —Ä–∞–±–æ—Ç–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ .env
import logging  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
from typing import Optional, Dict, Any  # –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

# –∫–∞—Ä–∫–∞—Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —É—Ç–∏–ª–∏—Ç—ã
from fastapi import FastAPI, Request, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware  # CORS-–¥–æ—Å—Ç—É–ø
from amo_client import refresh_access_token  # üîÅ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞

# Telegram SDK (aiogram)
from aiogram import Bot, Dispatcher
from aiogram.types import Update

# –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv

# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –≤ amoCRM
import aiohttp

# –∫–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
from openai import OpenAI

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
from bot import setup_handlers  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
from admin_api import router as admin_router  # REST –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
from repo import fetch_messages  # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î
from repo import upload_file_to_amo  # üî¥ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ amoCRM

# ======================
#     –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´
# ======================

load_dotenv()  # –ø–æ–¥–≥—Ä—É–∂–∞–µ–º .env

logging.basicConfig(  # –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)

# --- —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "secret")  # —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞
BASE_URL = os.getenv("BASE_URL", "").rstrip("/")  # –±–∞–∑–æ–≤—ã–π URL

# --- –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OpenAI ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

# –∂—ë—Å—Ç–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY is not set")
if not ASSISTANT_ID:
    raise RuntimeError("ASSISTANT_ID is not set")

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ amoCRM ---
AMO_WEBHOOK_URL = os.getenv("AMO_WEBHOOK_URL", "")
AMO_API_URL = os.getenv("AMO_API_URL", "")
AMO_ACCESS_TOKEN = os.getenv("AMO_ACCESS_TOKEN", "")
AMO_ENABLED = bool(AMO_WEBHOOK_URL or AMO_API_URL)

# --- —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã Telegram SDK ---
bot = Bot(BOT_TOKEN)  # –æ—Å–Ω–æ–≤–Ω–æ–π Telegram-–±–æ—Ç
dp = Dispatcher()  # –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä aiogram
app = FastAPI(title="medbot")  # –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI

# ======================
#     –ù–ê–°–¢–†–û–ô–ö–ê CORS
# ======================

# —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–º–µ–Ω—ã)
ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "https://amo.ap-development.com",
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=ALLOWED_ORIGINS,  # —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    allow_credentials=True,
    allow_methods=["*"],  # —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ HTTP-–º–µ—Ç–æ–¥—ã
    allow_headers=["*"],  # –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
)

# ====================================================
#     –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –°–í–Ø–ó–ù–û–°–¢–ò –° OpenAI API
# ====================================================

@app.get("/medbot/openai-selftest")
async def openai_selftest() -> Dict[str, Any]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å OpenAI:
    1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏.
    2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
    """
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        mdl = client.models.retrieve("gpt-4o-mini")  # —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏
        ast = client.beta.assistants.retrieve(ASSISTANT_ID)  # —Ç–µ—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        return {
            "ok": True,
            "model": mdl.id,
            "assistant_id": ast.id,
            "assistant_name": getattr(ast, "name", None),
        }
    except Exception as exc:
        logging.exception("OpenAI selftest failed")
        raise HTTPException(status_code=500, detail=str(exc))

# ==========================================================
#       –ì–õ–ê–í–ù–´–ô TELEGRAM WEBHOOK
# ==========================================================

@app.post("/medbot/webhook")
async def telegram_webhook(request: Request) -> Dict[str, Any]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–∏—ë–º–∞ Telegram-—Å–æ–æ–±—â–µ–Ω–∏–π.
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ aiogram.
    2. –î—É–±–ª–∏—Ä—É–µ–º –∞–ø–¥–µ–π—Ç –≤ amoCRM.
    3. –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É –∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ–±—Ö—É–∫–∞
    if request.headers.get("x-telegram-bot-api-secret-token") != WEBHOOK_SECRET:
        raise HTTPException(status_code=403, detail="bad secret")

    # —á–∏—Ç–∞–µ–º JSON —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (Telegram update)
    data = await request.json()

    # –ø–∞—Ä—Å–∏–º –≤ –æ–±—ä–µ–∫—Ç Update –¥–ª—è aiogram
    update = Update.model_validate(data)
    await dp.feed_update(bot, update)  # –ø–µ—Ä–µ–¥–∞—ë–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É aiogram

    # (1) –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ø–¥–µ–π—Ç–∞ –≤ amoCRM webhook
    if AMO_WEBHOOK_URL:
        try:
            async with aiohttp.ClientSession() as session:
                await session.post(AMO_WEBHOOK_URL, json=data, timeout=5)
                logging.info("üì® Telegram update forwarded to amoCRM webhook")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to forward Telegram update: {e}")

    # (2) –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ + –∫–æ–Ω—Ç–∞–∫—Ç + —Ñ–∞–π–ª
    if AMO_API_URL and AMO_ACCESS_TOKEN:
        try:
            msg = data.get("message") or {}
            text = msg.get("text", "")
            username = msg.get("from", {}).get("username", "unknown")
            message = f"{username}: {text}" if text else username

            # --- –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è ---
            file_uuid: Optional[str] = None

            # –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
            if "document" in msg:
                file_id = msg["document"]["file_id"]
                file_name = msg["document"].get("file_name", "file.bin")
                file_info = await bot.get_file(file_id)
                file_bytes = await bot.download_file(file_info.file_path)
                file_uuid = await upload_file_to_amo(
                    file_name, file_bytes.read()
                )

            # –µ—Å–ª–∏ —Ñ–æ—Ç–æ (–±–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ)
            elif "photo" in msg:
                photo = msg["photo"][-1]
                file_id = photo["file_id"]
                file_name = "photo.jpg"
                file_info = await bot.get_file(file_id)
                file_bytes = await bot.download_file(file_info.file_path)
                file_uuid = await upload_file_to_amo(
                    file_name, file_bytes.read()
                )

            # --- —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–∞–∫—Ç ---
            contact_payload = {"name": username or "Telegram user"}

            timeout = aiohttp.ClientTimeout(total=10)
            async with aiohttp.ClientSession(timeout=timeout) as session:
                async with session.post(
                    f"{AMO_API_URL}/api/v4/contacts",
                    headers={"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"},
                    json=[contact_payload],
                ) as contact_resp:
                    if contact_resp.status == 200:
                        contact_res = await contact_resp.json()
                        contact_id = contact_res[0]["id"]
                    else:
                        contact_id = None
                        err = await contact_resp.text()
                        logging.warning(
                            f"‚ö†Ô∏è Contact creation failed "
                            f"[{contact_resp.status}]: {err}"
                        )

                if not contact_id:
                    logging.warning("‚ö†Ô∏è Contact not created, skipping lead creation")
                    return {"ok": False}

                # --- —Å–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É ---
                lead_payload = {
                    "name": f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ Telegram ({username})",
                    "pipeline_id": int(os.getenv("AMO_PIPELINE_ID", "0")),
                    "_embedded": {"contacts": [{"id": contact_id}]},
                }

                async with session.post(
                    f"{AMO_API_URL}/api/v4/leads",
                    headers={"Authorization": f"Bearer {AMO_ACCESS_TOKEN}"},
                    json=[lead_payload],
                ) as lead_resp:
                    # üîÅ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª ‚Üí –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                    if lead_resp.status == 401:
                        logging.warning("‚ö†Ô∏è amoCRM token expired ‚Äî refreshing...")
                        new_token = await refresh_access_token()
                        async with session.post(
                            f"{AMO_API_URL}/api/v4/leads",
                            headers={"Authorization": f"Bearer {new_token}"},
                            json=[lead_payload],
                        ) as retry_resp:
                            if retry_resp.status == 200:
                                res = await retry_resp.json()
                                lead_id = res[0]["id"]
                                logging.info(f"‚úÖ Lead created after token refresh: {lead_id}")
                            else:
                                err = await retry_resp.text()
                                logging.warning(
                                    f"‚ùå Lead creation failed after refresh [{retry_resp.status}]: {err}"
                                )

                    elif lead_resp.status == 200:
                        res = await lead_resp.json()
                        lead_id = res[0]["id"]
                        logging.info(f"‚úÖ Created lead {lead_id} with note & file")

                    else:
                        err = await lead_resp.text()
                        logging.warning(
                            f"‚ùå Lead creation failed [{lead_resp.status}]: {err}"
                        )

        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Failed to create lead in amoCRM: {e}")

    return {"ok": True}  # Telegram –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

# ======================
#     HEALTHCHECK API
# ======================

@app.get("/medbot/health")
async def health() -> Dict[str, str]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    return {"status": "ok"}

# =====================================================
#   –í–•–û–î–Ø–©–ò–ï –°–û–ë–´–¢–ò–Ø –û–¢ AMOCRM
# =====================================================

@app.post("/medbot/amo-webhook")
async def amo_webhook(request: Request):
    """–ü—Ä–∏—ë–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç amoCRM (—Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫)."""
    data = await request.json()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç amoCRM: {data}")
    return {"ok": True}

# =====================================================
#   ADMIN API, TELEGRAM –•–≠–ù–î–õ–ï–†–´, WEBHOOK SETUP
# =====================================================

setup_handlers(dp)  # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Telegram-—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
app.include_router(admin_router)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ REST –∞–¥–º–∏–Ω–∫–∏

@app.get("/admin/set_webhook")
async def set_webhook() -> Dict[str, Any]:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram webhook (–≤—ã–∑–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)."""
    if not BASE_URL:
        raise HTTPException(500, "BASE_URL not set")

    await bot.set_webhook(
        url=f"{BASE_URL}/medbot/webhook",
        secret_token=WEBHOOK_SECRET,
        drop_pending_updates=True,
    )
    return {"ok": True, "url": f"{BASE_URL}/medbot/webhook"}

# =====================================================
#   API –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–ø–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã)
# =====================================================

@app.get("/admin-api/messages")
async def api_messages(
    chat_id: int = Query(..., description="ID —á–∞—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)"),
    limit: int = Query(20, ge=1, le=200),
    before_id: Optional[int] = Query(None),
    after_id: Optional[int] = Query(None),
    q: Optional[str] = Query(None, min_length=1),
    direction: Optional[int] = Query(None, ge=0, le=1),
    content_type: Optional[str] = Query(None),
    order: str = Query("desc", regex="^(asc|desc)$"),
) -> Dict[str, Any]:
    """API –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: –≤—ã–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π."""
    try:
        data = fetch_messages(
            chat_id=chat_id,
            limit=limit,
            before_id=before_id,
            after_id=after_id,
            q=q,
            direction=direction,
            content_type=content_type,
            order=order,
        )
        return data
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))
