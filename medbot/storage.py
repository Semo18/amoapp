# storage.py
import os  # os ‚Äî –æ–∫—Ä—É–∂–µ–Ω–∏–µ
import time  # time ‚Äî –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
import redis  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Redis
from typing import Optional, Dict
from constants import (  # üî¥ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    REDIS_THREAD_KEY,  # üî¥
    REDIS_LAST_SEEN_KEY,  # üî¥
    REDIS_ACK_ONCE_PREFIX,  # üî¥
    REDIS_LAST_ACK_PREFIX,  # üî¥
    REDIS_LEAD_ID_KEY,  # üî¥
)

# –±–µ—Ä—ë–º –∞–¥—Ä–µ—Å Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ª–æ–∫–∞–ª—å–Ω—ã–π
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")

# —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ; —Å—Ç—Ä–æ–∫–∏ –≤–º–µ—Å—Ç–æ –±–∞–π—Ç–æ–≤ —É–ø—Ä–æ—â–∞—é—Ç —Ä–∞–±–æ—Ç—É # üî¥
r = redis.from_url(
    REDIS_URL, decode_responses=True
)  # üî¥

# –∫–ª—é—á–∏ —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –∏–∑ –æ–±—â–µ–≥–æ –º–æ–¥—É–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç
# KEY = "medbot:tchat:thread"  # üî¥ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ constants

# –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
_last_seen: Dict[int, int] = {}


def get_thread_id(chat_id: int):
    # –ø–æ–ª—É—á–∞–µ–º thread_id –¥–ª—è —á–∞—Ç–∞ –∏–∑ Redis
    return r.hget(REDIS_THREAD_KEY, chat_id)  # üî¥


def set_thread_id(chat_id: int, thread_id: str):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    r.hset(REDIS_THREAD_KEY, chat_id, thread_id)  # üî¥
    r.hset(REDIS_LAST_SEEN_KEY, chat_id, int(time.time()))  # üî¥


def drop_thread_id(chat_id: int):
    # —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∫—É –∏ ¬´–ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å¬ª
    r.hdel(REDIS_THREAD_KEY, chat_id)  # üî¥
    r.hdel(REDIS_LAST_SEEN_KEY, chat_id)  # üî¥


def ack_once(chat_id: int, ttl_seconds: int = 24 * 3600) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –∞–≤—Ç–æ-–∫–≤–∏—Ç–æ–∫.
    –ï—Å–ª–∏ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –∏ –ø–æ–º–µ—á–∞–µ—Ç, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.
    TTL ‚Äî –≤—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–º–µ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞).
    """
    key = f"{REDIS_ACK_ONCE_PREFIX}{chat_id}"  # üî¥
    # SET NX EX: –∑–∞–ø–∏—Å–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ; —Å TTL
    return bool(r.set(key, "1", nx=True, ex=ttl_seconds))  # üî¥


def should_ack(chat_id: int, cooldown_sec: int = 3600) -> bool:
    """
    –†–µ—à–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ-–∫–≤–∏—Ç–æ–∫
    (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç"). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ
    –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å).
    """
    key = f"{REDIS_LAST_ACK_PREFIX}{chat_id}"  # üî¥
    now = int(time.time())  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    last = r.get(key)  # –≤—Ä–µ–º—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–≤—Ç–æ-–∫–≤–∏—Ç–∫–∞
    if last is None or (now - int(last)) > cooldown_sec:
        r.set(key, now)  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ-–∫–≤–∏—Ç–∫–∞
        return True  # –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∞–≤—Ç–æ-–∫–≤–∏—Ç–æ–∫
    return False  # —Ä–∞–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å, –∂–¥—ë–º –µ—â—ë


def get_lead_id(chat_id: int) -> Optional[str]:
    # –ø–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é —Å–¥–µ–ª–∫—É amoCRM –¥–ª—è —á–∞—Ç–∞
    return r.hget(REDIS_LEAD_ID_KEY, chat_id)  # üî¥


def set_lead_id(chat_id: int, lead_id: str):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑–∫—É —á–∞—Ç ‚Üí —Å–¥–µ–ª–∫–∞
    r.hset(REDIS_LEAD_ID_KEY, chat_id, lead_id)  # üî¥
