# admin_api.py
from __future__ import annotations  # –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫ –≤ 3.9+

# —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
from datetime import datetime, timedelta, timezone  # —Ä–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º

# —Ç–∏–ø–∏–∑–∞—Ü–∏—è
from typing import Optional, List, Dict, Any  # —Ç–∏–ø—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫

# —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø–∞–∫–µ—Ç—ã
from dateutil.parser import isoparse  # –ø–∞—Ä—Å–∏–Ω–≥ ISO/–¥–∞—Ç—ã –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
from fastapi import APIRouter, Query, HTTPException  # FastAPI-–ø—Ä–∏–º–∏—Ç–∏–≤—ã
from sqlalchemy import select, func, and_, desc, case  # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã SQL

# –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from db import SessionLocal, User, Message  # —Å–µ—Å—Å–∏—è –∏ ORM-–º–æ–¥–µ–ª–∏
from repo import get_analytics_summary  # üî¥ –µ–¥–∏–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Å–≤–æ–¥–∫–∏

# –†–æ—É—Ç–µ—Ä –∞–¥–º–∏–Ω-API —Å –æ–±—â–∏–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º.
router = APIRouter(prefix="/admin-api", tags=["admin"])  # —Ä–æ—É—Ç–µ—Ä


# =================
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ
# =================

def _parse_dt(s: Optional[str],
              default: Optional[datetime]) -> datetime:
    """–†–∞–∑–±–∏—Ä–∞–µ–º ISO –∏–ª–∏ YYYY-MM-DD. –ë–µ–∑ tz ‚Äî —Å—á–∏—Ç–∞–µ–º UTC."""
    if s:  # –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–∞–Ω–∞ ‚Äî –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        try:  # –∑–∞—â–∏—â–∞–µ–º—Å—è –æ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            dt = isoparse(s)  # —Å–æ–∑–¥–∞—ë–º datetime
            if dt.tzinfo is None:  # –±–µ–∑ tz ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ UTC
                dt = dt.replace(tzinfo=timezone.utc)  # —Å—Ç–∞–≤–∏–º UTC
            return dt.astimezone(timezone.utc)  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ UTC
        except Exception:  # –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            raise HTTPException(400, detail=f"Bad datetime format: {s}")  # 400
    if default is None:  # –∫–æ–≥–¥–∞ –Ω–µ—Ç –∏ —Å—Ç—Ä–æ–∫–∏, –∏ –¥–µ—Ñ–æ–ª—Ç–∞
        raise HTTPException(400, detail="Missing date")  # 400
    return default  # –æ—Ç–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç


def _period_range(  # üî¥ –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ –≤ –≥—Ä–∞–Ω–∏—Ü—ã
    period: Optional[str],  # —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ø–µ—Ä–∏–æ–¥
    date_from: Optional[str],  # —è–≤–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    date_to: Optional[str],  # —è–≤–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
) -> tuple[datetime, datetime]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É–∏–Ω—Ç–µ—Ä–≤–∞–ª [from, to) –≤ UTC –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    now = datetime.now(timezone.utc)  # —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç UTC
    if date_from or date_to:  # –µ—Å–ª–∏ –≥—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞–Ω—ã —è–≤–Ω–æ
        start = _parse_dt(date_from, now - timedelta(days=1))  # –Ω–∏–∂–Ω—è—è
        end = _parse_dt(date_to, now)  # –≤–µ—Ä—Ö–Ω—è—è
        return start, end  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å

    p = (period or "day").lower()  # –∏–º—è –ø–µ—Ä–∏–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é day)
    today = datetime(now.year, now.month, now.day,
                     tzinfo=timezone.utc)  # –ø–æ–ª–Ω–æ—á—å UTC

    if p == "day":  # —Å—É—Ç–∫–∏ —Å–µ–≥–æ–¥–Ω—è
        return today, today + timedelta(days=1)  # [00:00..+1d)
    if p == "week":  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π ¬´–æ—Ç —Å–µ–π—á–∞—Å¬ª
        return now - timedelta(days=7), now  # —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ
    if p == "month":  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å—É—Ç–æ–∫ ¬´–æ—Ç —Å–µ–π—á–∞—Å¬ª
        return now - timedelta(days=30), now  # —Å–∫–æ–ª—å–∑—è—â–µ–µ –æ–∫–Ω–æ

    if p in {"this_month", "current_month"}:  # üî¥ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        start = datetime(now.year, now.month, 1, tzinfo=timezone.utc)  # 1-–µ
        return start, now  # –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞

    if p in {"prev_month", "previous_month"}:  # üî¥ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
        first_this = datetime(now.year, now.month, 1,
                              tzinfo=timezone.utc)  # 1-–µ —Ç–µ–∫. –º–µ—Å
        end = first_this  # –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ ‚Äî –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        prev_end = first_this - timedelta(days=1)  # –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –ø—Ä–æ—à–ª.
        start = datetime(prev_end.year, prev_end.month, 1,
                         tzinfo=timezone.utc)  # 1-–µ –ø—Ä–æ—à–ª. –º–µ—Å
        return start, end  # –ø–æ–ª–Ω—ã–π –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü

    return now - timedelta(days=1), now  # –¥–µ—Ñ–æ–ª—Ç ¬´–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏¬ª


# ===========
# –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
# ===========

@router.get("/chats")  # –æ—Ç–¥–∞—ë–º —á–∞—Ç—ã —Å –∏—Ö —Å—á—ë—Ç—á–∏–∫–∞–º–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
def list_chats(
    period: Optional[str] = Query(  # üî¥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        None, description="day|week|month|this_month|prev_month"
    ),  # —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç
    date_from: Optional[str] = Query(  # —è–≤–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        None, description="ISO or YYYY-MM-DD (inclusive)"
    ),  # —Å—Ç—Ä–æ–∫–∞-–¥–∞—Ç–∞
    date_to: Optional[str] = Query(  # —è–≤–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        None, description="ISO or YYYY-MM-DD (exclusive)"
    ),  # —Å—Ç—Ä–æ–∫–∞-–¥–∞—Ç–∞
    limit: int = Query(50, ge=1, le=200),  # —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset: int = Query(0, ge=0),  # —Å–º–µ—â–µ–Ω–∏–µ
) -> Dict[str, Any]:  # JSON —Å total+items
    """–ß–∞—Ç—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."""
    dt_from, dt_to = _period_range(period, date_from, date_to)  # üî¥ –≥—Ä–∞–Ω–∏—Ü—ã

    with SessionLocal() as s:  # –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—Å
        sub = (  # –ø–æ–¥–∑–∞–ø—Ä–æ—Å: —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            select(Message.chat_id, func.count().label("cnt"))  # chat_id+cnt
            .where(and_(Message.created_at >= dt_from,  # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                        Message.created_at < dt_to))  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
            .group_by(Message.chat_id)  # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ chat_id
            .subquery()  # –ø–æ–¥–∑–∞–ø—Ä–æ—Å
        )
        q = (  # –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            select(
                User.chat_id,  # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
                User.username,  # –Ω–∏–∫
                User.first_name,  # –∏–º—è
                User.last_name,  # —Ñ–∞–º–∏–ª–∏—è
                User.last_seen_at,  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                User.messages_total,  # –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
                func.coalesce(sub.c.cnt, 0).label("messages_in_period"),
            )  # —Å—á—ë—Ç—á–∏–∫ –∑–∞ –ø–µ—Ä–∏–æ–¥
            .join(sub, sub.c.chat_id == User.chat_id, isouter=True)  # LEFT
            .order_by(desc("messages_in_period"),  # –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                      desc(User.last_seen_at))  # –∏ –ø–æ —Å–≤–µ–∂–µ—Å—Ç–∏
            .limit(limit)  # –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
            .offset(offset)  # —Å–º–µ—â–µ–Ω–∏–µ
        )
        rows = s.execute(q).all()  # –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å

        q_total = select(func.count()).select_from(sub)  # –≤—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        total = s.execute(q_total).scalar() or 0  # —á–∏—Å–ª–æ —á–∞—Ç–æ–≤

        items: List[Dict[str, Any]] = []  # —Å–æ–±–∏—Ä–∞–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        for r in rows:  # –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            items.append(
                {
                    "chat_id": r.chat_id,  # id
                    "username": r.username,  # –Ω–∏–∫
                    "first_name": r.first_name,  # –∏–º—è
                    "last_name": r.last_name,  # —Ñ–∞–º–∏–ª–∏—è
                    "last_seen_at": r.last_seen_at,  # –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
                    "messages_total": r.messages_total,  # –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    "messages_in_period": int(r.messages_in_period or 0),
                }  # –∑–∞ –ø–µ—Ä–∏–æ–¥
            )
        return {"total": int(total), "items": items}  # –æ—Ç–≤–µ—Ç


# ==========================
# –°–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
# ==========================

@router.get("/chats/{chat_id}/messages")  # —ç–Ω–¥–ø–æ–π–Ω—Ç: –ª–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
def chat_messages(
    chat_id: int,  # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
    period: Optional[str] = Query(  # üî¥ –ø—Ä–µ—Å–µ—Ç –ø–µ—Ä–∏–æ–¥–∞
        None, description="day|week|month|this_month|prev_month"
    ),
    date_from: Optional[str] = Query(None),  # —è–≤–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    date_to: Optional[str] = Query(None),  # —è–≤–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    limit: int = Query(50, ge=1, le=500),  # —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset: int = Query(0, ge=0),  # —Å–º–µ—â–µ–Ω–∏–µ
    q: Optional[str] = Query(  # üî¥ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ
        None, min_length=1, description="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (ILIKE)"
    ),
    direction: Optional[int] = Query(  # üî¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 0=user‚Üíbot, 1=bot‚Üíuser
        None, ge=0, le=1, description="–§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é (0/1)"
    ),
    content_type: Optional[str] = Query(  # üî¥ —Ç–∏–ø —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        None, description="text|photo|audio|voice|document"
    ),
) -> Dict[str, Any]:  # JSON-–æ—Ç–≤–µ—Ç: { total, items }
    """
    –°–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é, —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É.
    –õ–æ–≥–∏–∫–∞: –≤—ã–±–∏—Ä–∞–µ–º –∏–∑ messages —Ç–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–∏ chat_id, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω.
    """
    # üî¥ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–µ—Ä–∏–æ–¥–∞ (–ø–æ –ø—Ä–µ—Å–µ—Ç—É –∏–ª–∏ —Ä—É—á–Ω—ã–º –¥–∞—Ç–∞–º)
    dt_from, dt_to = _period_range(period, date_from, date_to)

    # üî¥ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    with SessionLocal() as s:
        # üî¥ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª–æ–≤–∏–π –≤—ã–±–æ—Ä–∫–∏ (WHERE)
        cond = [
            Message.chat_id == chat_id,  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ —á–∞—Ç—É
            Message.created_at >= dt_from,  # –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
            Message.created_at < dt_to,  # –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        ]

        # üî¥ –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        if direction in (0, 1):
            cond.append(Message.direction == direction)

        # üî¥ –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
        if content_type:
            cond.append(Message.content_type == content_type)

        # üî¥ –ü–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ —Ç–µ–∫—Å—Ç–∞ (ILIKE)
        if q:
            ilike = f"%{q.strip()}%"
            cond.append(Message.text.ilike(ilike))

        # üî¥ –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        q_stmt = (
            select(
                Message.id,  # PK
                Message.direction,  # 0/1
                Message.text,  # —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                Message.content_type,  # —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                Message.attachment_name,  # –∏–º—è –≤–ª–æ–∂–µ–Ω–∏—è
                Message.created_at,  # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
            )
            .where(and_(*cond))  # –ø—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
            .order_by(desc(Message.created_at))  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
            .limit(limit)  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            .offset(offset)  # —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        )

        # üî¥ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å
        rows = s.execute(q_stmt).all()

        # üî¥ –û—Ç–¥–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        q_total = select(func.count()).where(and_(*cond))
        total = s.execute(q_total).scalar() or 0  # –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # üî¥ –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ORM-—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (JSON-friendly)
        items: List[Dict[str, Any]] = []
        for r in rows:
            items.append(
                {
                    "id": r.id,
                    "direction": r.direction,
                    "text": r.text,
                    "content_type": r.content_type,
                    "attachment_name": r.attachment_name,
                    "created_at": (
                        r.created_at.isoformat()
                        if hasattr(r.created_at, "isoformat")
                        else r.created_at
                    ),  # üî¥ –≤ ISO 8601
                }
            )

        # üî¥ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
        return {"total": int(total), "items": items}



# =========
# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
# =========

@router.get("/analytics/summary")  # —Å–≤–æ–¥–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
def analytics_summary_api(
    period: Optional[str] = Query(  # üî¥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        None, description="day|week|month|this_month|prev_month"
    ),  # —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç
    date_from: Optional[str] = Query(None),  # —è–≤–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    date_to: Optional[str] = Query(None),  # —è–≤–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
) -> Dict[str, Any]:  # JSON —Å–æ —Å—á—ë—Ç—á–∏–∫–∞–º–∏
    """–ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞: –≤—Å–µ–≥–æ/–≤—Ö–æ–¥—è—â–∏—Ö/–∏—Å—Ö–æ–¥—è—â–∏—Ö/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."""
    dt_from, dt_to = _period_range(period, date_from, date_to)  # üî¥ –≥—Ä–∞–Ω–∏—Ü—ã
    return get_analytics_summary(dt_from, dt_to)  # üî¥ –µ–¥–∏–Ω—ã–π —Ä–∞—Å—á—ë—Ç


@router.get("/analytics/users")  # –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def analytics_users(
    period: Optional[str] = Query(  # üî¥ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        None, description="day|week|month|this_month|prev_month"
    ),  # —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç
    date_from: Optional[str] = Query(None),  # —è–≤–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    date_to: Optional[str] = Query(None),  # —è–≤–Ω–∞—è –≤–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
    limit: int = Query(50, ge=1, le=500),  # —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset: int = Query(0, ge=0),  # —Å–º–µ—â–µ–Ω–∏–µ
) -> Dict[str, Any]:  # JSON —Å total+items
    """–†–∞–∑–±–∏–≤–∫–∞: –≤—Ö–æ–¥—è—â–∏–µ/–∏—Å—Ö–æ–¥—è—â–∏–µ –ø–æ chat_id. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å—É–º–º–µ."""
    dt_from, dt_to = _period_range(period, date_from, date_to)  # üî¥ –≥—Ä–∞–Ω–∏—Ü—ã

    with SessionLocal() as s:  # –æ–¥–Ω–∞ —Å–µ—Å—Å–∏—è –Ω–∞ –∑–∞–ø—Ä–æ—Å
        agg = (  # –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º I/O –ø–æ –∫–∞–∂–¥–æ–º—É chat_id
            select(
                Message.chat_id,  # –∫–ª—é—á –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
                func.sum(  # —Å—á–∏—Ç–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ
                    case((Message.direction == 0, 1), else_=0)
                ).label("messages_in"),
                func.sum(  # —Å—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ
                    case((Message.direction == 1, 1), else_=0)
                ).label("messages_out"),
                func.min(Message.created_at).label("first_in_period"),
            )
            .where(and_(Message.created_at >= dt_from,  # –≥—Ä–∞–Ω–∏—Ü—ã
                        Message.created_at < dt_to))  # –≥—Ä–∞–Ω–∏—Ü—ã
            .group_by(Message.chat_id)  # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç—É
            .subquery()  # –ø–æ–¥–∑–∞–ø—Ä–æ—Å
        )

        q = (  # –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ —Ç–∞–±–ª–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            select(
                User.chat_id,  # id
                User.username,  # –Ω–∏–∫
                User.first_name,  # –∏–º—è
                User.last_name,  # —Ñ–∞–º–∏–ª–∏—è
                agg.c.messages_in,  # –≤—Ö–æ–¥—è—â–∏–µ
                agg.c.messages_out,  # –∏—Å—Ö–æ–¥—è—â–∏–µ
                agg.c.first_in_period,  # –ø–µ—Ä–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            )
            .join(agg, agg.c.chat_id == User.chat_id)  # INNER: —Ç–æ–ª—å–∫–æ –∞–∫—Ç.
            .order_by(desc(agg.c.messages_in + agg.c.messages_out))  # —Å–æ—Ä—Ç
            .limit(limit)  # —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            .offset(offset)  # —Å–º–µ—â–µ–Ω–∏–µ
        )
        rows = s.execute(q).all()  # –≤—ã–ø–æ–ª–Ω—è–µ–º

        q_total = select(func.count()).select_from(agg)  # –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π
        total = s.execute(q_total).scalar() or 0  # —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        items: List[Dict[str, Any]] = []  # —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
        for r in rows:  # –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å
            items.append(
                {
                    "chat_id": r.chat_id,  # id
                    "username": r.username,  # –Ω–∏–∫
                    "first_name": r.first_name,  # –∏–º—è
                    "last_name": r.last_name,  # —Ñ–∞–º–∏–ª–∏—è
                    "messages_in": int(r.messages_in or 0),  # –≤—Ö–æ–¥.
                    "messages_out": int(r.messages_out or 0),  # –∏—Å—Ö–æ–¥.
                    "first_seen_in_period": r.first_in_period,  # –ø–µ—Ä–≤–∞—è
                }
            )
        return {"total": int(total), "items": items}  # –æ—Ç–≤–µ—Ç
